
Huy_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a88  08005a88  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005a88  08005a88  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a88  08005a88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a88  08005a88  00015a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000074  08005b04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  08005b04  00021c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a45c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d6  00000000  00000000  0003a4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  0003dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  0003f438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033c8  00000000  00000000  00040a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a315  00000000  00000000  00043e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b10b  00000000  00000000  0005e14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006610  00000000  00000000  000f92a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080059a0 	.word	0x080059a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080059a0 	.word	0x080059a0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbec 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f820 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f94a 	bl	80003f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f86e 	bl	8000240 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8aa 	bl	80002bc <MX_I2C1_Init>
  MX_IWDG_Init();
 8000168:	f000 f8d6 	bl	8000318 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f8ee 	bl	800034c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f916 	bl	80003a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f002 fe18 	bl	8002da8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <main+0x40>)
 800017a:	2100      	movs	r1, #0
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <main+0x44>)
 800017e:	f002 fe79 	bl	8002e74 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <main+0x48>)
 8000186:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000188:	f002 fe40 	bl	8002e0c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	e7fe      	b.n	800018c <main+0x3c>
 800018e:	bf00      	nop
 8000190:	080059ec 	.word	0x080059ec
 8000194:	080004a9 	.word	0x080004a9
 8000198:	200001a8 	.word	0x200001a8

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b094      	sub	sp, #80	; 0x50
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f005 fb32 	bl	8005814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	f107 0314 	add.w	r3, r7, #20
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80001cc:	230a      	movs	r3, #10
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d4:	2310      	movs	r3, #16
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001dc:	2300      	movs	r3, #0
 80001de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 fa99 	bl	800171c <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f0:	f000 f974 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fd06 	bl	8001c20 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021a:	f000 f95f 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021e:	2302      	movs	r3, #2
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fec1 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000234:	f000 f952 	bl	80004dc <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3750      	adds	r7, #80	; 0x50
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <MX_ADC1_Init+0x78>)
 8000254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000256:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_ADC1_Init+0x74>)
 800025e:	2200      	movs	r2, #0
 8000260:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000264:	2200      	movs	r2, #0
 8000266:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_ADC1_Init+0x74>)
 800026a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800026e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000278:	2201      	movs	r2, #1
 800027a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <MX_ADC1_Init+0x74>)
 800027e:	f000 fb89 	bl	8000994 <HAL_ADC_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000288:	f000 f928 	bl	80004dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4619      	mov	r1, r3
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_ADC1_Init+0x74>)
 800029e:	f000 fc51 	bl	8000b44 <HAL_ADC_ConfigChannel>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a8:	f000 f918 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000090 	.word	0x20000090
 80002b8:	40012400 	.word	0x40012400

080002bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_I2C1_Init+0x50>)
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_I2C1_Init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_I2C1_Init+0x50>)
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <MX_I2C1_Init+0x58>)
 80002ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_I2C1_Init+0x50>)
 80002da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <MX_I2C1_Init+0x50>)
 80002fa:	f001 f889 	bl	8001410 <HAL_I2C_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f8ea 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000c0 	.word	0x200000c0
 8000310:	40005400 	.word	0x40005400
 8000314:	000186a0 	.word	0x000186a0

08000318 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_IWDG_Init+0x2c>)
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <MX_IWDG_Init+0x30>)
 8000320:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_IWDG_Init+0x2c>)
 8000324:	2204      	movs	r2, #4
 8000326:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_IWDG_Init+0x2c>)
 800032a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800032e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_IWDG_Init+0x2c>)
 8000332:	f001 f9b1 	bl	8001698 <HAL_IWDG_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800033c:	f000 f8ce 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000114 	.word	0x20000114
 8000348:	40003000 	.word	0x40003000

0800034c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <MX_USART1_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000384:	f002 f914 	bl	80025b0 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f8a5 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000120 	.word	0x20000120
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART2_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003d8:	f002 f8ea 	bl	80025b0 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f87b 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000164 	.word	0x20000164
 80003f0:	40004400 	.word	0x40004400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a23      	ldr	r2, [pc, #140]	; (800049c <MX_GPIO_Init+0xa8>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <MX_GPIO_Init+0xa8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_GPIO_Init+0xa8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <MX_GPIO_Init+0xa8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_GPIO_Init+0xa8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <MX_GPIO_Init+0xa8>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_Pin|RELAY_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8000456:	4812      	ldr	r0, [pc, #72]	; (80004a0 <MX_GPIO_Init+0xac>)
 8000458:	f000 ffc2 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 800045c:	2310      	movs	r3, #16
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480d      	ldr	r0, [pc, #52]	; (80004a4 <MX_GPIO_Init+0xb0>)
 8000470:	f000 fe32 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RELAY_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RELAY_Pin|LED2_Pin|LED1_Pin;
 8000474:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_GPIO_Init+0xac>)
 800048e:	f000 fe23 	bl	80010d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	40010800 	.word	0x40010800

080004a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f002 fd89 	bl	8002fc8 <osDelay>
 80004b6:	e7fb      	b.n	80004b0 <StartDefaultTask+0x8>

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ca:	f000 fa47 	bl	800095c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40000800 	.word	0x40000800

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_MspInit+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_MspInit+0x68>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_MspInit+0x68>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_MspInit+0x68>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_MspInit+0x68>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x68>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	210f      	movs	r1, #15
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fcfc 	bl	8000f22 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_MspInit+0x6c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x6c>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <HAL_ADC_MspInit+0x6c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d121      	bne.n	80005bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_ADC_MspInit+0x70>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VOL_Pin;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VOL_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <HAL_ADC_MspInit+0x74>)
 80005b8:	f000 fd8e 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40012400 	.word	0x40012400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <HAL_I2C_MspInit+0x70>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d123      	bne.n	8000638 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_I2C_MspInit+0x74>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <HAL_I2C_MspInit+0x74>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_I2C_MspInit+0x74>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0308 	and.w	r3, r3, #8
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000608:	23c0      	movs	r3, #192	; 0xc0
 800060a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060c:	2312      	movs	r3, #18
 800060e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <HAL_I2C_MspInit+0x78>)
 800061c:	f000 fd5c 	bl	80010d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_I2C_MspInit+0x74>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_I2C_MspInit+0x74>)
 8000626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800062a:	61d3      	str	r3, [r2, #28]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_I2C_MspInit+0x74>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40005400 	.word	0x40005400
 8000644:	40021000 	.word	0x40021000
 8000648:	40010c00 	.word	0x40010c00

0800064c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0318 	add.w	r3, r7, #24
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <HAL_UART_MspInit+0x118>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d13a      	bne.n	80006e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <HAL_UART_MspInit+0x11c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <HAL_UART_MspInit+0x11c>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <HAL_UART_MspInit+0x11c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_UART_MspInit+0x11c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a37      	ldr	r2, [pc, #220]	; (8000768 <HAL_UART_MspInit+0x11c>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <HAL_UART_MspInit+0x11c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800069c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	4619      	mov	r1, r3
 80006b0:	482e      	ldr	r0, [pc, #184]	; (800076c <HAL_UART_MspInit+0x120>)
 80006b2:	f000 fd11 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4619      	mov	r1, r3
 80006ca:	4828      	ldr	r0, [pc, #160]	; (800076c <HAL_UART_MspInit+0x120>)
 80006cc:	f000 fd04 	bl	80010d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2105      	movs	r1, #5
 80006d4:	2025      	movs	r0, #37	; 0x25
 80006d6:	f000 fc24 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006da:	2025      	movs	r0, #37	; 0x25
 80006dc:	f000 fc3d 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e0:	e03c      	b.n	800075c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <HAL_UART_MspInit+0x124>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d137      	bne.n	800075c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_UART_MspInit+0x11c>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_UART_MspInit+0x11c>)
 80006f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f6:	61d3      	str	r3, [r2, #28]
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_UART_MspInit+0x11c>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_UART_MspInit+0x11c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <HAL_UART_MspInit+0x11c>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_UART_MspInit+0x11c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800071c:	2304      	movs	r3, #4
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4619      	mov	r1, r3
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <HAL_UART_MspInit+0x120>)
 8000730:	f000 fcd2 	bl	80010d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000734:	2308      	movs	r3, #8
 8000736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	4619      	mov	r1, r3
 8000746:	4809      	ldr	r0, [pc, #36]	; (800076c <HAL_UART_MspInit+0x120>)
 8000748:	f000 fcc6 	bl	80010d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2105      	movs	r1, #5
 8000750:	2026      	movs	r0, #38	; 0x26
 8000752:	f000 fbe6 	bl	8000f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000756:	2026      	movs	r0, #38	; 0x26
 8000758:	f000 fbff 	bl	8000f5a <HAL_NVIC_EnableIRQ>
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40013800 	.word	0x40013800
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800
 8000770:	40004400 	.word	0x40004400

08000774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <HAL_InitTick+0xe8>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a33      	ldr	r2, [pc, #204]	; (800085c <HAL_InitTick+0xe8>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <HAL_InitTick+0xe8>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a2:	f107 0210 	add.w	r2, r7, #16
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fbb1 	bl	8001f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007bc:	f001 fb82 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 80007c0:	6378      	str	r0, [r7, #52]	; 0x34
 80007c2:	e004      	b.n	80007ce <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007c4:	f001 fb7e 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <HAL_InitTick+0xec>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	3b01      	subs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_InitTick+0xf0>)
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <HAL_InitTick+0xf4>)
 80007e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <HAL_InitTick+0xf0>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007ea:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <HAL_InitTick+0xf0>)
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_InitTick+0xf0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_InitTick+0xf0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_InitTick+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <HAL_InitTick+0xf0>)
 8000804:	f001 fc8a 	bl	800211c <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800080e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000812:	2b00      	cmp	r3, #0
 8000814:	d11b      	bne.n	800084e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <HAL_InitTick+0xf0>)
 8000818:	f001 fcd8 	bl	80021cc <HAL_TIM_Base_Start_IT>
 800081c:	4603      	mov	r3, r0
 800081e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000826:	2b00      	cmp	r3, #0
 8000828:	d111      	bne.n	800084e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800082a:	201e      	movs	r0, #30
 800082c:	f000 fb95 	bl	8000f5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b0f      	cmp	r3, #15
 8000834:	d808      	bhi.n	8000848 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000836:	2200      	movs	r2, #0
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	201e      	movs	r0, #30
 800083c:	f000 fb71 	bl	8000f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_InitTick+0xf8>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	e002      	b.n	800084e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800084e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000852:	4618      	mov	r0, r3
 8000854:	3738      	adds	r7, #56	; 0x38
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	431bde83 	.word	0x431bde83
 8000864:	200001ac 	.word	0x200001ac
 8000868:	40000800 	.word	0x40000800
 800086c:	20000004 	.word	0x20000004

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
	...

0800089c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM4_IRQHandler+0x10>)
 80008a2:	f001 fce5 	bl	8002270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001ac 	.word	0x200001ac

080008b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <USART1_IRQHandler+0x10>)
 80008b6:	f001 fec9 	bl	800264c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000120 	.word	0x20000120

080008c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <USART2_IRQHandler+0x10>)
 80008ca:	f001 febf 	bl	800264c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000164 	.word	0x20000164

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ffe5 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f004 ff4d 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fc1d 	bl	8000150 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000920:	08005a90 	.word	0x08005a90
  ldr r2, =_sbss
 8000924:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000928:	20001c08 	.word	0x20001c08

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 fae3 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f7ff ff14 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fdcc 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	200001f4 	.word	0x200001f4

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200001f4 	.word	0x200001f4

08000994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e0be      	b.n	8000b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fdc0 	bl	8000558 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f9ab 	bl	8000d34 <ADC_ConversionStop_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8099 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8095 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a2c:	d003      	beq.n	8000a36 <HAL_ADC_Init+0xa2>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_Init+0xa8>
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_Init+0xaa>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7d1b      	ldrb	r3, [r3, #20]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b1b      	ldrb	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	035a      	lsls	r2, r3, #13
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00b      	b.n	8000a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6c:	f043 0220 	orr.w	r2, r3, #32
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <HAL_ADC_Init+0x1a8>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0x126>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d104      	bne.n	8000ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	051b      	lsls	r3, r3, #20
 8000ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_ADC_Init+0x1ac>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afe:	e018      	b.n	8000b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f023 0312 	bic.w	r3, r3, #18
 8000b08:	f043 0210 	orr.w	r2, r3, #16
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f043 0210 	orr.w	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b40:	ff1f0efe 	.word	0xff1f0efe

08000b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x20>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e0dc      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x1da>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d81c      	bhi.n	8000bae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b05      	subs	r3, #5
 8000b86:	221f      	movs	r2, #31
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4019      	ands	r1, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b05      	subs	r3, #5
 8000ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34
 8000bac:	e03c      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d81c      	bhi.n	8000bf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b23      	subs	r3, #35	; 0x23
 8000bc8:	221f      	movs	r2, #31
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4019      	ands	r1, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b23      	subs	r3, #35	; 0x23
 8000be2:	fa00 f203 	lsl.w	r2, r0, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
 8000bee:	e01b      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b41      	subs	r3, #65	; 0x41
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b41      	subs	r3, #65	; 0x41
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d91c      	bls.n	8000c6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b1e      	subs	r3, #30
 8000c42:	2207      	movs	r2, #7
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6898      	ldr	r0, [r3, #8]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b1e      	subs	r3, #30
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	e019      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6919      	ldr	r1, [r3, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6898      	ldr	r0, [r3, #8]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	fa00 f203 	lsl.w	r2, r0, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d132      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d125      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d126      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d11a      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9a      	lsrs	r2, r3, #18
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x1b2>
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f043 0220 	orr.w	r2, r3, #32
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40012400 	.word	0x40012400
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d12e      	bne.n	8000dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d5e:	f7ff fe0f 	bl	8000980 <HAL_GetTick>
 8000d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d64:	e01b      	b.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d66:	f7ff fe0b 	bl	8000980 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d914      	bls.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10d      	bne.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e007      	b.n	8000dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d0dc      	beq.n	8000d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	; (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff4f 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff64 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ffb2 	bl	8000ea8 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff81 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff57 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d008      	beq.n	8000f9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e020      	b.n	8000fe0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 020e 	bic.w	r2, r2, #14
 8000fac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d005      	beq.n	800100e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2204      	movs	r2, #4
 8001006:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e051      	b.n	80010b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 020e 	bic.w	r2, r2, #14
 800101c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0201 	bic.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a22      	ldr	r2, [pc, #136]	; (80010bc <HAL_DMA_Abort_IT+0xd0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d029      	beq.n	800108c <HAL_DMA_Abort_IT+0xa0>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <HAL_DMA_Abort_IT+0xd4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d022      	beq.n	8001088 <HAL_DMA_Abort_IT+0x9c>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <HAL_DMA_Abort_IT+0xd8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01a      	beq.n	8001082 <HAL_DMA_Abort_IT+0x96>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_DMA_Abort_IT+0xdc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d012      	beq.n	800107c <HAL_DMA_Abort_IT+0x90>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_DMA_Abort_IT+0xe0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00a      	beq.n	8001076 <HAL_DMA_Abort_IT+0x8a>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <HAL_DMA_Abort_IT+0xe4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d102      	bne.n	8001070 <HAL_DMA_Abort_IT+0x84>
 800106a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800106e:	e00e      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 8001070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001074:	e00b      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 8001076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107a:	e008      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	e005      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 8001082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001086:	e002      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 8001088:	2310      	movs	r3, #16
 800108a:	e000      	b.n	800108e <HAL_DMA_Abort_IT+0xa2>
 800108c:	2301      	movs	r3, #1
 800108e:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_DMA_Abort_IT+0xe8>)
 8001090:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
    } 
  }
  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40020008 	.word	0x40020008
 80010c0:	4002001c 	.word	0x4002001c
 80010c4:	40020030 	.word	0x40020030
 80010c8:	40020044 	.word	0x40020044
 80010cc:	40020058 	.word	0x40020058
 80010d0:	4002006c 	.word	0x4002006c
 80010d4:	40020000 	.word	0x40020000

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	; (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	; (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	; (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	; (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	; (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	492c      	ldr	r1, [pc, #176]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4922      	ldr	r1, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	4918      	ldr	r1, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	490e      	ldr	r1, [pc, #56]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	60cb      	str	r3, [r1, #12]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	; 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e12b      	b.n	800167a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff f8ca 	bl	80005d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2224      	movs	r2, #36	; 0x24
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001474:	f000 fd26 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8001478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a81      	ldr	r2, [pc, #516]	; (8001684 <HAL_I2C_Init+0x274>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d807      	bhi.n	8001494 <HAL_I2C_Init+0x84>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a80      	ldr	r2, [pc, #512]	; (8001688 <HAL_I2C_Init+0x278>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	e006      	b.n	80014a2 <HAL_I2C_Init+0x92>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a7d      	ldr	r2, [pc, #500]	; (800168c <HAL_I2C_Init+0x27c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	bf94      	ite	ls
 800149c:	2301      	movls	r3, #1
 800149e:	2300      	movhi	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0e7      	b.n	800167a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4a78      	ldr	r2, [pc, #480]	; (8001690 <HAL_I2C_Init+0x280>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_I2C_Init+0x274>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d802      	bhi.n	80014e4 <HAL_I2C_Init+0xd4>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	e009      	b.n	80014f8 <HAL_I2C_Init+0xe8>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a69      	ldr	r2, [pc, #420]	; (8001694 <HAL_I2C_Init+0x284>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	3301      	adds	r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800150a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	495c      	ldr	r1, [pc, #368]	; (8001684 <HAL_I2C_Init+0x274>)
 8001514:	428b      	cmp	r3, r1
 8001516:	d819      	bhi.n	800154c <HAL_I2C_Init+0x13c>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e59      	subs	r1, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fbb1 f3f3 	udiv	r3, r1, r3
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800152c:	400b      	ands	r3, r1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <HAL_I2C_Init+0x138>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1e59      	subs	r1, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	e051      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 8001548:	2304      	movs	r3, #4
 800154a:	e04f      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <HAL_I2C_Init+0x168>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e58      	subs	r0, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	440b      	add	r3, r1
 8001562:	fbb0 f3f3 	udiv	r3, r0, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e012      	b.n	800159e <HAL_I2C_Init+0x18e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	0099      	lsls	r1, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Init+0x196>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e022      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10e      	bne.n	80015cc <HAL_I2C_Init+0x1bc>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1e58      	subs	r0, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	440b      	add	r3, r1
 80015bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ca:	e00f      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	0099      	lsls	r1, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	6809      	ldr	r1, [r1, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800161a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6911      	ldr	r1, [r2, #16]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68d2      	ldr	r2, [r2, #12]
 8001626:	4311      	orrs	r1, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	430b      	orrs	r3, r1
 800162e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	000186a0 	.word	0x000186a0
 8001688:	001e847f 	.word	0x001e847f
 800168c:	003d08ff 	.word	0x003d08ff
 8001690:	431bde83 	.word	0x431bde83
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e034      	b.n	8001714 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80016b2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f245 5255 	movw	r2, #21845	; 0x5555
 80016bc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6852      	ldr	r2, [r2, #4]
 80016c6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6892      	ldr	r2, [r2, #8]
 80016d0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80016d2:	f7ff f955 	bl	8000980 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80016d8:	e00f      	b.n	80016fa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80016da:	f7ff f951 	bl	8000980 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b27      	cmp	r3, #39	; 0x27
 80016e6:	d908      	bls.n	80016fa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e00c      	b.n	8001714 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e8      	bne.n	80016da <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001710:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e272      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8087 	beq.w	800184a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800173c:	4b92      	ldr	r3, [pc, #584]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d00c      	beq.n	8001762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001748:	4b8f      	ldr	r3, [pc, #572]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	2b08      	cmp	r3, #8
 8001752:	d112      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
 8001754:	4b8c      	ldr	r3, [pc, #560]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d10b      	bne.n	800177a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001762:	4b89      	ldr	r3, [pc, #548]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d06c      	beq.n	8001848 <HAL_RCC_OscConfig+0x12c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d168      	bne.n	8001848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e24c      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x76>
 8001784:	4b80      	ldr	r3, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a7f      	ldr	r2, [pc, #508]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e02e      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a77      	ldr	r2, [pc, #476]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e01d      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0xbc>
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6e      	ldr	r2, [pc, #440]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0xd4>
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a67      	ldr	r2, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f8c2 	bl	8000980 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f8be 	bl	8000980 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e200      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0xe4>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f8ae 	bl	8000980 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff f8aa 	bl	8000980 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e1ec      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x10c>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001856:	4b4c      	ldr	r3, [pc, #304]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	d11c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1c0      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4939      	ldr	r1, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	e03a      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f863 	bl	8000980 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff f85f 	bl	8000980 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e1a1      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x270>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f842 	bl	8000980 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff f83e 	bl	8000980 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e180      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03a      	beq.n	80019a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f822 	bl	8000980 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff f81e 	bl	8000980 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e160      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x26c>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 fb08 	bl	8001f74 <RCC_Delay>
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x274>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff f808 	bl	8000980 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001972:	e00f      	b.n	8001994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff f804 	bl	8000980 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d908      	bls.n	8001994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e146      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	42420000 	.word	0x42420000
 8001990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e9      	bne.n	8001974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a6 	beq.w	8001afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b8b      	ldr	r3, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a87      	ldr	r2, [pc, #540]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b82      	ldr	r3, [pc, #520]	; (8001be4 <HAL_RCC_OscConfig+0x4c8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x4c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a7e      	ldr	r2, [pc, #504]	; (8001be4 <HAL_RCC_OscConfig+0x4c8>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7fe ffc5 	bl	8000980 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7fe ffc1 	bl	8000980 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b64      	cmp	r3, #100	; 0x64
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e103      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b75      	ldr	r3, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x4c8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x312>
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e02d      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a36:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a69      	ldr	r2, [pc, #420]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6213      	str	r3, [r2, #32]
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	e01c      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d10c      	bne.n	8001a72 <HAL_RCC_OscConfig+0x356>
 8001a58:	4b61      	ldr	r3, [pc, #388]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4a60      	ldr	r2, [pc, #384]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6213      	str	r3, [r2, #32]
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0x36e>
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6213      	str	r3, [r2, #32]
 8001a7e:	4b58      	ldr	r3, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d015      	beq.n	8001abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7fe ff75 	bl	8000980 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7fe ff71 	bl	8000980 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0b1      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ee      	beq.n	8001a9a <HAL_RCC_OscConfig+0x37e>
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7fe ff5f 	bl	8000980 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7fe ff5b 	bl	8000980 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e09b      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ee      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d105      	bne.n	8001afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a3b      	ldr	r2, [pc, #236]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8087 	beq.w	8001c12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d061      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d146      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <HAL_RCC_OscConfig+0x4cc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ff2f 	bl	8000980 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe ff2b 	bl	8000980 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e06d      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d108      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4921      	ldr	r1, [pc, #132]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a19      	ldr	r1, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	430b      	orrs	r3, r1
 8001b72:	491b      	ldr	r1, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x4cc>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe feff 	bl	8000980 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7fe fefb 	bl	8000980 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e03d      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46a>
 8001ba4:	e035      	b.n	8001c12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_RCC_OscConfig+0x4cc>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fee8 	bl	8000980 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7fe fee4 	bl	8000980 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e026      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x498>
 8001bd2:	e01e      	b.n	8001c12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e019      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x500>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0d0      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4965      	ldr	r1, [pc, #404]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0b8      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	494d      	ldr	r1, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d040      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e07f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e073      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e06b      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4936      	ldr	r1, [pc, #216]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d10:	f7fe fe36 	bl	8000980 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7fe fe32 	bl	8000980 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e053      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1eb      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d210      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4922      	ldr	r1, [pc, #136]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e032      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4916      	ldr	r1, [pc, #88]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dae:	f000 f821 	bl	8001df4 <HAL_RCC_GetSysClockFreq>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	490a      	ldr	r1, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	5ccb      	ldrb	r3, [r1, r3]
 8001dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1cc>)
 8001dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fcd0 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40022000 	.word	0x40022000
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08005a10 	.word	0x08005a10
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df4:	b490      	push	{r4, r7}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001dfc:	1d3c      	adds	r4, r7, #4
 8001dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e04:	f240 2301 	movw	r3, #513	; 0x201
 8001e08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x46>
 8001e32:	e02b      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e36:	623b      	str	r3, [r7, #32]
      break;
 8001e38:	e02b      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3328      	adds	r3, #40	; 0x28
 8001e44:	443b      	add	r3, r7
 8001e46:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e4a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d012      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	0c5b      	lsrs	r3, r3, #17
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	3328      	adds	r3, #40	; 0x28
 8001e62:	443b      	add	r3, r7
 8001e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	e004      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e80:	fb02 f303 	mul.w	r3, r2, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	623b      	str	r3, [r7, #32]
      break;
 8001e8a:	e002      	b.n	8001e92 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e8e:	623b      	str	r3, [r7, #32]
      break;
 8001e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e92:	6a3b      	ldr	r3, [r7, #32]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc90      	pop	{r4, r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	080059c4 	.word	0x080059c4
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	003d0900 	.word	0x003d0900

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec8:	f7ff fff2 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08005a20 	.word	0x08005a20

08001eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08005a20 	.word	0x08005a20

08001f14 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	220f      	movs	r2, #15
 8001f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_GetClockConfig+0x58>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_RCC_GetClockConfig+0x58>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_GetClockConfig+0x58>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_GetClockConfig+0x58>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_GetClockConfig+0x5c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0207 	and.w	r2, r3, #7
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40022000 	.word	0x40022000

08001f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <RCC_Delay+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <RCC_Delay+0x38>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f90:	bf00      	nop
  }
  while (Delay --);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <RCC_Delay+0x1c>
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d07d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd0:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d118      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002010:	f7fe fcb6 	bl	8000980 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	e008      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fcb2 	bl	8000980 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e06d      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d02e      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d027      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d014      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fc81 	bl	8000980 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fc7d 	bl	8000980 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4917      	ldr	r1, [pc, #92]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a13      	ldr	r2, [pc, #76]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	490b      	ldr	r1, [pc, #44]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4904      	ldr	r1, [pc, #16]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	42420440 	.word	0x42420440

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e041      	b.n	80021b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f839 	bl	80021ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 f9b4 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d001      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e03a      	b.n	800225a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a18      	ldr	r2, [pc, #96]	; (8002264 <HAL_TIM_Base_Start_IT+0x98>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220e:	d009      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_TIM_Base_Start_IT+0x9c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x58>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIM_Base_Start_IT+0xa0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d111      	bne.n	8002248 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b06      	cmp	r3, #6
 8002234:	d010      	beq.n	8002258 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002246:	e007      	b.n	8002258 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800

08002270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0202 	mvn.w	r2, #2
 800229c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8ed 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8e0 	bl	8002480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f8ef 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0204 	mvn.w	r2, #4
 80022f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f8c3 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f8b6 	bl	8002480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8c5 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d122      	bne.n	8002374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b08      	cmp	r3, #8
 800233a:	d11b      	bne.n	8002374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0208 	mvn.w	r2, #8
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2204      	movs	r2, #4
 800234a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f899 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f88c 	bl	8002480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f89b 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b10      	cmp	r3, #16
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b10      	cmp	r3, #16
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0210 	mvn.w	r2, #16
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2208      	movs	r2, #8
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f86f 	bl	8002492 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f862 	bl	8002480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f871 	bl	80024a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0201 	mvn.w	r2, #1
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f862 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8bf 	bl	800259e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f835 	bl	80024b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b20      	cmp	r3, #32
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b20      	cmp	r3, #32
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0220 	mvn.w	r2, #32
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f88a 	bl	800258c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a29      	ldr	r2, [pc, #164]	; (8002580 <TIM_Base_SetConfig+0xb8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00b      	beq.n	80024f8 <TIM_Base_SetConfig+0x30>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d007      	beq.n	80024f8 <TIM_Base_SetConfig+0x30>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <TIM_Base_SetConfig+0xbc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <TIM_Base_SetConfig+0x30>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <TIM_Base_SetConfig+0xc0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d108      	bne.n	800250a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <TIM_Base_SetConfig+0xb8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00b      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <TIM_Base_SetConfig+0xbc>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <TIM_Base_SetConfig+0xc0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <TIM_Base_SetConfig+0xb8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	615a      	str	r2, [r3, #20]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e03f      	b.n	8002642 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe f838 	bl	800064c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb49 	bl	8002c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_UART_IRQHandler+0x52>
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa4f 	bl	8002b3a <UART_Receive_IT>
      return;
 800269c:	e17b      	b.n	8002996 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b1 	beq.w	8002808 <HAL_UART_IRQHandler+0x1bc>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_UART_IRQHandler+0x70>
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a6 	beq.w	8002808 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_UART_IRQHandler+0x90>
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_UART_IRQHandler+0xb0>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f043 0202 	orr.w	r2, r3, #2
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_UART_IRQHandler+0xd0>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00f      	beq.n	8002746 <HAL_UART_IRQHandler+0xfa>
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_UART_IRQHandler+0xee>
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0208 	orr.w	r2, r3, #8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 811e 	beq.w	800298c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_UART_IRQHandler+0x11e>
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9e8 	bl	8002b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_UART_IRQHandler+0x146>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d031      	beq.n	80027f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f92a 	bl	80029ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d023      	beq.n	80027ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d013      	beq.n	80027e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	4a76      	ldr	r2, [pc, #472]	; (800299c <HAL_UART_IRQHandler+0x350>)
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fc0e 	bl	8000fec <HAL_DMA_Abort_IT>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e0:	4610      	mov	r0, r2
 80027e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	e00e      	b.n	8002804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8ec 	bl	80029c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	e00a      	b.n	8002804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8e8 	bl	80029c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f4:	e006      	b.n	8002804 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8e4 	bl	80029c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002802:	e0c3      	b.n	800298c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	bf00      	nop
    return;
 8002806:	e0c1      	b.n	800298c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 80a1 	bne.w	8002954 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 809b 	beq.w	8002954 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8095 	beq.w	8002954 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04e      	beq.n	80028ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002858:	8a3b      	ldrh	r3, [r7, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8098 	beq.w	8002990 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002864:	8a3a      	ldrh	r2, [r7, #16]
 8002866:	429a      	cmp	r2, r3
 8002868:	f080 8092 	bcs.w	8002990 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8a3a      	ldrh	r2, [r7, #16]
 8002870:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b20      	cmp	r3, #32
 800287a:	d02b      	beq.n	80028d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800288a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0210 	bic.w	r2, r2, #16
 80028c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fb51 	bl	8000f76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f876 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028ea:	e051      	b.n	8002990 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d047      	beq.n	8002994 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002904:	8a7b      	ldrh	r3, [r7, #18]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d044      	beq.n	8002994 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002918:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0210 	bic.w	r2, r2, #16
 8002946:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002948:	8a7b      	ldrh	r3, [r7, #18]
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f842 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002952:	e01f      	b.n	8002994 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_UART_IRQHandler+0x324>
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f87f 	bl	8002a6c <UART_Transmit_IT>
    return;
 800296e:	e012      	b.n	8002996 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_UART_IRQHandler+0x34a>
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8c0 	bl	8002b0a <UART_EndTransmit_IT>
    return;
 800298a:	e004      	b.n	8002996 <HAL_UART_IRQHandler+0x34a>
    return;
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <HAL_UART_IRQHandler+0x34a>
      return;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <HAL_UART_IRQHandler+0x34a>
      return;
 8002994:	bf00      	nop
  }
}
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	08002a45 	.word	0x08002a45

080029a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ffb0 	bl	80029c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b21      	cmp	r3, #33	; 0x21
 8002a7e:	d13e      	bne.n	8002afe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a88:	d114      	bne.n	8002ab4 <UART_Transmit_IT+0x48>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d110      	bne.n	8002ab4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	1c9a      	adds	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]
 8002ab2:	e008      	b.n	8002ac6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	1c59      	adds	r1, r3, #1
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6211      	str	r1, [r2, #32]
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ff38 	bl	80029a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b22      	cmp	r3, #34	; 0x22
 8002b4c:	f040 8099 	bne.w	8002c82 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b58:	d117      	bne.n	8002b8a <UART_Receive_IT+0x50>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d113      	bne.n	8002b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	1c9a      	adds	r2, r3, #2
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28
 8002b88:	e026      	b.n	8002bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d007      	beq.n	8002bae <UART_Receive_IT+0x74>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <UART_Receive_IT+0x82>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e008      	b.n	8002bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4619      	mov	r1, r3
 8002be6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d148      	bne.n	8002c7e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0220 	bic.w	r2, r2, #32
 8002bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d123      	bne.n	8002c74 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0210 	bic.w	r2, r2, #16
 8002c40:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d10a      	bne.n	8002c66 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff feb2 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
 8002c72:	e002      	b.n	8002c7a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fe9c 	bl	80029b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e002      	b.n	8002c84 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e000      	b.n	8002c84 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cc6:	f023 030c 	bic.w	r3, r3, #12
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <UART_SetConfig+0x114>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cf4:	f7ff f8fa 	bl	8001eec <HAL_RCC_GetPCLK2Freq>
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	e002      	b.n	8002d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cfc:	f7ff f8e2 	bl	8001ec4 <HAL_RCC_GetPCLK1Freq>
 8002d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009a      	lsls	r2, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <UART_SetConfig+0x118>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	0119      	lsls	r1, r3, #4
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <UART_SetConfig+0x118>)
 8002d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2064      	movs	r0, #100	; 0x64
 8002d42:	fb00 f303 	mul.w	r3, r0, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	3332      	adds	r3, #50	; 0x32
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <UART_SetConfig+0x118>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d58:	4419      	add	r1, r3
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009a      	lsls	r2, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <UART_SetConfig+0x118>)
 8002d72:	fba3 0302 	umull	r0, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2064      	movs	r0, #100	; 0x64
 8002d7a:	fb00 f303 	mul.w	r3, r0, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	3332      	adds	r3, #50	; 0x32
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <UART_SetConfig+0x118>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 020f 	and.w	r2, r3, #15
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	440a      	add	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40013800 	.word	0x40013800
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dae:	f3ef 8305 	mrs	r3, IPSR
 8002db2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002db4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dba:	f3ef 8310 	mrs	r3, PRIMASK
 8002dbe:	607b      	str	r3, [r7, #4]
  return(result);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <osKernelInitialize+0x32>
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <osKernelInitialize+0x60>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d109      	bne.n	8002de2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dce:	f3ef 8311 	mrs	r3, BASEPRI
 8002dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002dda:	f06f 0305 	mvn.w	r3, #5
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e00c      	b.n	8002dfc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <osKernelInitialize+0x60>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <osKernelInitialize+0x60>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e002      	b.n	8002dfc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	200001f8 	.word	0x200001f8

08002e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e12:	f3ef 8305 	mrs	r3, IPSR
 8002e16:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10f      	bne.n	8002e3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	607b      	str	r3, [r7, #4]
  return(result);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <osKernelStart+0x32>
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <osKernelStart+0x64>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d109      	bne.n	8002e46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e32:	f3ef 8311 	mrs	r3, BASEPRI
 8002e36:	603b      	str	r3, [r7, #0]
  return(result);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e3e:	f06f 0305 	mvn.w	r3, #5
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e00e      	b.n	8002e64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <osKernelStart+0x64>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <osKernelStart+0x64>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e54:	f001 f890 	bl	8003f78 <vTaskStartScheduler>
      stat = osOK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e002      	b.n	8002e64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200001f8 	.word	0x200001f8

08002e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b092      	sub	sp, #72	; 0x48
 8002e78:	af04      	add	r7, sp, #16
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e84:	f3ef 8305 	mrs	r3, IPSR
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f040 8094 	bne.w	8002fba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e92:	f3ef 8310 	mrs	r3, PRIMASK
 8002e96:	623b      	str	r3, [r7, #32]
  return(result);
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 808d 	bne.w	8002fba <osThreadNew+0x146>
 8002ea0:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <osThreadNew+0x150>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d106      	bne.n	8002eb6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8002eac:	61fb      	str	r3, [r7, #28]
  return(result);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 8082 	bne.w	8002fba <osThreadNew+0x146>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d07e      	beq.n	8002fba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002ec0:	2318      	movs	r3, #24
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002ec8:	f107 031b 	add.w	r3, r7, #27
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d045      	beq.n	8002f66 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <osThreadNew+0x74>
        name = attr->name;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d008      	beq.n	8002f0e <osThreadNew+0x9a>
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	2b38      	cmp	r3, #56	; 0x38
 8002f00:	d805      	bhi.n	8002f0e <osThreadNew+0x9a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <osThreadNew+0x9e>
        return (NULL);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e054      	b.n	8002fbc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <osThreadNew+0xd4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2bbb      	cmp	r3, #187	; 0xbb
 8002f30:	d90a      	bls.n	8002f48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <osThreadNew+0xd4>
        mem = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f46:	e010      	b.n	8002f6a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10c      	bne.n	8002f6a <osThreadNew+0xf6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <osThreadNew+0xf6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <osThreadNew+0xf6>
          mem = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f64:	e001      	b.n	8002f6a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d110      	bne.n	8002f92 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f78:	9202      	str	r2, [sp, #8]
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fe12 	bl	8003bb0 <xTaskCreateStatic>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e013      	b.n	8002fba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d110      	bne.n	8002fba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fe5c 	bl	8003c68 <xTaskCreate>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d001      	beq.n	8002fba <osThreadNew+0x146>
          hTask = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fba:	697b      	ldr	r3, [r7, #20]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3738      	adds	r7, #56	; 0x38
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200001f8 	.word	0x200001f8

08002fc8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fd0:	f3ef 8305 	mrs	r3, IPSR
 8002fd4:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10f      	bne.n	8002ffc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <osDelay+0x34>
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <osDelay+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d109      	bne.n	8003004 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8002ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <osDelay+0x3c>
    stat = osErrorISR;
 8002ffc:	f06f 0305 	mvn.w	r3, #5
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e007      	b.n	8003014 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <osDelay+0x4c>
      vTaskDelay(ticks);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 ff7e 	bl	8003f10 <vTaskDelay>
    }
  }

  return (stat);
 8003014:	697b      	ldr	r3, [r7, #20]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200001f8 	.word	0x200001f8

08003024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a06      	ldr	r2, [pc, #24]	; (800304c <vApplicationGetIdleTaskMemory+0x28>)
 8003034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <vApplicationGetIdleTaskMemory+0x2c>)
 800303a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	200001fc 	.word	0x200001fc
 8003050:	200002b8 	.word	0x200002b8

08003054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <vApplicationGetTimerTaskMemory+0x2c>)
 8003064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <vApplicationGetTimerTaskMemory+0x30>)
 800306a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200004b8 	.word	0x200004b8
 8003084:	20000574 	.word	0x20000574

08003088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f103 0208 	add.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f04f 32ff 	mov.w	r2, #4294967295
 80030a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f103 0208 	add.w	r2, r3, #8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f103 0208 	add.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d103      	bne.n	8003144 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e00c      	b.n	800315e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3308      	adds	r3, #8
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e002      	b.n	8003152 <vListInsert+0x2e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	d2f6      	bcs.n	800314c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6852      	ldr	r2, [r2, #4]
 80031b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d103      	bne.n	80031c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
	...

080031e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003212:	f001 fff3 	bl	80051fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	3b01      	subs	r3, #1
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	441a      	add	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01a      	beq.n	80032a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3310      	adds	r3, #16
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f91b 	bl	80044b0 <xTaskRemoveFromEventList>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <xQueueGenericReset+0xcc>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	e009      	b.n	80032a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3310      	adds	r3, #16
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fef6 	bl	8003088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fef1 	bl	8003088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032a6:	f001 ffd9 	bl	800525c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	; 0x38
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <xQueueGenericCreateStatic+0x52>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xQueueGenericCreateStatic+0x56>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueGenericCreateStatic+0x58>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	623b      	str	r3, [r7, #32]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <xQueueGenericCreateStatic+0x7e>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <xQueueGenericCreateStatic+0x82>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <xQueueGenericCreateStatic+0x84>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61fb      	str	r3, [r7, #28]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003356:	2350      	movs	r3, #80	; 0x50
 8003358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b50      	cmp	r3, #80	; 0x50
 800335e:	d00a      	beq.n	8003376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	61bb      	str	r3, [r7, #24]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003388:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f805 	bl	80033a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800339e:	4618      	mov	r0, r3
 80033a0:	3730      	adds	r7, #48	; 0x30
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e002      	b.n	80033c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033d4:	2101      	movs	r1, #1
 80033d6:	69b8      	ldr	r0, [r7, #24]
 80033d8:	f7ff ff06 	bl	80031e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08e      	sub	sp, #56	; 0x38
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033fa:	2300      	movs	r3, #0
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10a      	bne.n	800341e <xQueueGenericSend+0x32>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <xQueueGenericSend+0x40>
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <xQueueGenericSend+0x44>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <xQueueGenericSend+0x46>
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <xQueueGenericSend+0x60>
	__asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003448:	bf00      	nop
 800344a:	e7fe      	b.n	800344a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d103      	bne.n	800345a <xQueueGenericSend+0x6e>
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <xQueueGenericSend+0x72>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <xQueueGenericSend+0x74>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xQueueGenericSend+0x8e>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	623b      	str	r3, [r7, #32]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800347a:	f001 f9df 	bl	800483c <xTaskGetSchedulerState>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <xQueueGenericSend+0x9e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <xQueueGenericSend+0xa2>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <xQueueGenericSend+0xa4>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	61fb      	str	r3, [r7, #28]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034aa:	f001 fea7 	bl	80051fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <xQueueGenericSend+0xd4>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d129      	bne.n	8003514 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c6:	f000 fa07 	bl	80038d8 <prvCopyDataToQueue>
 80034ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 ffe9 	bl	80044b0 <xTaskRemoveFromEventList>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034e4:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <xQueueGenericSend+0x1f8>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	e00a      	b.n	800350c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034fc:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <xQueueGenericSend+0x1f8>)
 80034fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800350c:	f001 fea6 	bl	800525c <vPortExitCritical>
				return pdPASS;
 8003510:	2301      	movs	r3, #1
 8003512:	e063      	b.n	80035dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800351a:	f001 fe9f 	bl	800525c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800351e:	2300      	movs	r3, #0
 8003520:	e05c      	b.n	80035dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4618      	mov	r0, r3
 800352e:	f001 f823 	bl	8004578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003536:	f001 fe91 	bl	800525c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800353a:	f000 fd8d 	bl	8004058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800353e:	f001 fe5d 	bl	80051fc <vPortEnterCritical>
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003548:	b25b      	sxtb	r3, r3
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d103      	bne.n	8003558 <xQueueGenericSend+0x16c>
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355e:	b25b      	sxtb	r3, r3
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d103      	bne.n	800356e <xQueueGenericSend+0x182>
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356e:	f001 fe75 	bl	800525c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003572:	1d3a      	adds	r2, r7, #4
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 f812 	bl	80045a4 <xTaskCheckForTimeOut>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d124      	bne.n	80035d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003588:	f000 fa9e 	bl	8003ac8 <prvIsQueueFull>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	3310      	adds	r3, #16
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f000 ff38 	bl	8004410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a2:	f000 fa29 	bl	80039f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035a6:	f000 fd65 	bl	8004074 <xTaskResumeAll>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f af7c 	bne.w	80034aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <xQueueGenericSend+0x1f8>)
 80035b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	e772      	b.n	80034aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c6:	f000 fa17 	bl	80039f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ca:	f000 fd53 	bl	8004074 <xTaskResumeAll>
 80035ce:	e76c      	b.n	80034aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d2:	f000 fa11 	bl	80039f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035d6:	f000 fd4d 	bl	8004074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035da:	2300      	movs	r3, #0
		}
	}
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3738      	adds	r7, #56	; 0x38
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08e      	sub	sp, #56	; 0x38
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d103      	bne.n	8003624 <xQueueGenericSendFromISR+0x3c>
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <xQueueGenericSendFromISR+0x40>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <xQueueGenericSendFromISR+0x42>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	623b      	str	r3, [r7, #32]
}
 8003640:	bf00      	nop
 8003642:	e7fe      	b.n	8003642 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <xQueueGenericSendFromISR+0x6a>
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <xQueueGenericSendFromISR+0x6e>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <xQueueGenericSendFromISR+0x70>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	61fb      	str	r3, [r7, #28]
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003672:	f001 fe85 	bl	8005380 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003676:	f3ef 8211 	mrs	r2, BASEPRI
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	61ba      	str	r2, [r7, #24]
 800368c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800368e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <xQueueGenericSendFromISR+0xbc>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d12c      	bne.n	80036fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b4:	f000 f910 	bl	80038d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d112      	bne.n	80036e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	3324      	adds	r3, #36	; 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 feee 	bl	80044b0 <xTaskRemoveFromEventList>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00e      	beq.n	80036f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e007      	b.n	80036f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	b25a      	sxtb	r2, r3
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036f8:	2301      	movs	r3, #1
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036fc:	e001      	b.n	8003702 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800370c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003710:	4618      	mov	r0, r3
 8003712:	3738      	adds	r7, #56	; 0x38
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <xQueueReceive+0x30>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	623b      	str	r3, [r7, #32]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <xQueueReceive+0x3e>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <xQueueReceive+0x42>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueReceive+0x44>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xQueueReceive+0x5e>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	61fb      	str	r3, [r7, #28]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003776:	f001 f861 	bl	800483c <xTaskGetSchedulerState>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <xQueueReceive+0x6e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <xQueueReceive+0x72>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueReceive+0x74>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10a      	bne.n	80037a6 <xQueueReceive+0x8e>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61bb      	str	r3, [r7, #24]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a6:	f001 fd29 	bl	80051fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01f      	beq.n	80037f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ba:	f000 f8f7 	bl	80039ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00f      	beq.n	80037ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	3310      	adds	r3, #16
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fe6c 	bl	80044b0 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <xQueueReceive+0x1bc>)
 80037e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037ee:	f001 fd35 	bl	800525c <vPortExitCritical>
				return pdPASS;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e069      	b.n	80038ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037fc:	f001 fd2e 	bl	800525c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003800:	2300      	movs	r3, #0
 8003802:	e062      	b.n	80038ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380a:	f107 0310 	add.w	r3, r7, #16
 800380e:	4618      	mov	r0, r3
 8003810:	f000 feb2 	bl	8004578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003818:	f001 fd20 	bl	800525c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800381c:	f000 fc1c 	bl	8004058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003820:	f001 fcec 	bl	80051fc <vPortEnterCritical>
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382a:	b25b      	sxtb	r3, r3
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d103      	bne.n	800383a <xQueueReceive+0x122>
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003840:	b25b      	sxtb	r3, r3
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d103      	bne.n	8003850 <xQueueReceive+0x138>
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003850:	f001 fd04 	bl	800525c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003854:	1d3a      	adds	r2, r7, #4
 8003856:	f107 0310 	add.w	r3, r7, #16
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fea1 	bl	80045a4 <xTaskCheckForTimeOut>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d123      	bne.n	80038b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386a:	f000 f917 	bl	8003a9c <prvIsQueueEmpty>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fdc7 	bl	8004410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003884:	f000 f8b8 	bl	80039f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003888:	f000 fbf4 	bl	8004074 <xTaskResumeAll>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d189      	bne.n	80037a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <xQueueReceive+0x1bc>)
 8003894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	e780      	b.n	80037a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a6:	f000 f8a7 	bl	80039f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038aa:	f000 fbe3 	bl	8004074 <xTaskResumeAll>
 80038ae:	e77a      	b.n	80037a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b2:	f000 f8a1 	bl	80039f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038b6:	f000 fbdd 	bl	8004074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038bc:	f000 f8ee 	bl	8003a9c <prvIsQueueEmpty>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f43f af6f 	beq.w	80037a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3730      	adds	r7, #48	; 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d14d      	bne.n	800399a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 ffb8 	bl	8004878 <xTaskPriorityDisinherit>
 8003908:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	e043      	b.n	800399a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d119      	bne.n	800394c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6898      	ldr	r0, [r3, #8]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	461a      	mov	r2, r3
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	f001 ff68 	bl	80057f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	429a      	cmp	r2, r3
 8003940:	d32b      	bcc.n	800399a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	e026      	b.n	800399a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68d8      	ldr	r0, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	461a      	mov	r2, r3
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	f001 ff4e 	bl	80057f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	425b      	negs	r3, r3
 8003966:	441a      	add	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d207      	bcs.n	8003988 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	425b      	negs	r3, r3
 8003982:	441a      	add	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d105      	bne.n	800399a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	3b01      	subs	r3, #1
 8003998:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039a2:	697b      	ldr	r3, [r7, #20]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	441a      	add	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d303      	bcc.n	80039e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68d9      	ldr	r1, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	461a      	mov	r2, r3
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f001 ff04 	bl	80057f8 <memcpy>
	}
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a00:	f001 fbfc 	bl	80051fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a0c:	e011      	b.n	8003a32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3324      	adds	r3, #36	; 0x24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fd48 	bl	80044b0 <xTaskRemoveFromEventList>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a26:	f000 fe1f 	bl	8004668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dce9      	bgt.n	8003a0e <prvUnlockQueue+0x16>
 8003a3a:	e000      	b.n	8003a3e <prvUnlockQueue+0x46>
					break;
 8003a3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a46:	f001 fc09 	bl	800525c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a4a:	f001 fbd7 	bl	80051fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a56:	e011      	b.n	8003a7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3310      	adds	r3, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fd23 	bl	80044b0 <xTaskRemoveFromEventList>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a70:	f000 fdfa 	bl	8004668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	dce9      	bgt.n	8003a58 <prvUnlockQueue+0x60>
 8003a84:	e000      	b.n	8003a88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a90:	f001 fbe4 	bl	800525c <vPortExitCritical>
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aa4:	f001 fbaa 	bl	80051fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e001      	b.n	8003aba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aba:	f001 fbcf 	bl	800525c <vPortExitCritical>

	return xReturn;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad0:	f001 fb94 	bl	80051fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d102      	bne.n	8003ae6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e001      	b.n	8003aea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aea:	f001 fbb7 	bl	800525c <vPortExitCritical>

	return xReturn;
 8003aee:	68fb      	ldr	r3, [r7, #12]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e014      	b.n	8003b32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b08:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <vQueueAddToRegistry+0x4c>)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b14:	490b      	ldr	r1, [pc, #44]	; (8003b44 <vQueueAddToRegistry+0x4c>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <vQueueAddToRegistry+0x4c>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b2a:	e006      	b.n	8003b3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	d9e7      	bls.n	8003b08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	20000974 	.word	0x20000974

08003b48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b58:	f001 fb50 	bl	80051fc <vPortEnterCritical>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b62:	b25b      	sxtb	r3, r3
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d103      	bne.n	8003b72 <vQueueWaitForMessageRestricted+0x2a>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d103      	bne.n	8003b88 <vQueueWaitForMessageRestricted+0x40>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b88:	f001 fb68 	bl	800525c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3324      	adds	r3, #36	; 0x24
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fc5b 	bl	8004458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff28 	bl	80039f8 <prvUnlockQueue>
	}
 8003ba8:	bf00      	nop
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xTaskCreateStatic+0x2a>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	623b      	str	r3, [r7, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	61fb      	str	r3, [r7, #28]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bf6:	23bc      	movs	r3, #188	; 0xbc
 8003bf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2bbc      	cmp	r3, #188	; 0xbc
 8003bfe:	d00a      	beq.n	8003c16 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61bb      	str	r3, [r7, #24]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01e      	beq.n	8003c5a <xTaskCreateStatic+0xaa>
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01b      	beq.n	8003c5a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c34:	2300      	movs	r3, #0
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f851 	bl	8003cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c54:	f000 f8ec 	bl	8003e30 <prvAddNewTaskToReadyList>
 8003c58:	e001      	b.n	8003c5e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c5e:	697b      	ldr	r3, [r7, #20]
	}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	; 0x30
 8003c6c:	af04      	add	r7, sp, #16
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fbbd 	bl	80053fc <pvPortMalloc>
 8003c82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c8a:	20bc      	movs	r0, #188	; 0xbc
 8003c8c:	f001 fbb6 	bl	80053fc <pvPortMalloc>
 8003c90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9e:	e005      	b.n	8003cac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f001 fc6f 	bl	8005584 <vPortFree>
 8003ca6:	e001      	b.n	8003cac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d017      	beq.n	8003ce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9303      	str	r3, [sp, #12]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f80f 	bl	8003cf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cd6:	69f8      	ldr	r0, [r7, #28]
 8003cd8:	f000 f8aa 	bl	8003e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e002      	b.n	8003ce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	21a5      	movs	r1, #165	; 0xa5
 8003d0e:	f001 fd81 	bl	8005814 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f023 0307 	bic.w	r3, r3, #7
 8003d2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	617b      	str	r3, [r7, #20]
}
 8003d48:	bf00      	nop
 8003d4a:	e7fe      	b.n	8003d4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	e012      	b.n	8003d78 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	7819      	ldrb	r1, [r3, #0]
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3334      	adds	r3, #52	; 0x34
 8003d62:	460a      	mov	r2, r1
 8003d64:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	d9e9      	bls.n	8003d52 <prvInitialiseNewTask+0x5e>
 8003d7e:	e000      	b.n	8003d82 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003d80:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	2b37      	cmp	r3, #55	; 0x37
 8003d8e:	d901      	bls.n	8003d94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d90:	2337      	movs	r3, #55	; 0x37
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	2200      	movs	r2, #0
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f98b 	bl	80030c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	3318      	adds	r3, #24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff f986 	bl	80030c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	3354      	adds	r3, #84	; 0x54
 8003de4:	2260      	movs	r2, #96	; 0x60
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fd13 	bl	8005814 <memset>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <prvInitialiseNewTask+0x130>)
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <prvInitialiseNewTask+0x134>)
 8003df8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	4a0b      	ldr	r2, [pc, #44]	; (8003e2c <prvInitialiseNewTask+0x138>)
 8003dfe:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	69b8      	ldr	r0, [r7, #24]
 8003e06:	f001 f90b 	bl	8005020 <pxPortInitialiseStack>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08005a48 	.word	0x08005a48
 8003e28:	08005a68 	.word	0x08005a68
 8003e2c:	08005a28 	.word	0x08005a28

08003e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e38:	f001 f9e0 	bl	80051fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <prvAddNewTaskToReadyList+0xc4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <prvAddNewTaskToReadyList+0xc4>)
 8003e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e46:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <prvAddNewTaskToReadyList+0xc8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <prvAddNewTaskToReadyList+0xc8>)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <prvAddNewTaskToReadyList+0xc4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d110      	bne.n	8003e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e5c:	f000 fc28 	bl	80046b0 <prvInitialiseTaskLists>
 8003e60:	e00d      	b.n	8003e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <prvAddNewTaskToReadyList+0xcc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <prvAddNewTaskToReadyList+0xc8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d802      	bhi.n	8003e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <prvAddNewTaskToReadyList+0xc8>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <prvAddNewTaskToReadyList+0xd0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <prvAddNewTaskToReadyList+0xd0>)
 8003e86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <prvAddNewTaskToReadyList+0xd0>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <prvAddNewTaskToReadyList+0xd4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d903      	bls.n	8003ea4 <prvAddNewTaskToReadyList+0x74>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <prvAddNewTaskToReadyList+0xd4>)
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <prvAddNewTaskToReadyList+0xd8>)
 8003eb2:	441a      	add	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7ff f90f 	bl	80030de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ec0:	f001 f9cc 	bl	800525c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <prvAddNewTaskToReadyList+0xcc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddNewTaskToReadyList+0xc8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d207      	bcs.n	8003eea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvAddNewTaskToReadyList+0xdc>)
 8003edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000e88 	.word	0x20000e88
 8003ef8:	200009b4 	.word	0x200009b4
 8003efc:	20000e94 	.word	0x20000e94
 8003f00:	20000ea4 	.word	0x20000ea4
 8003f04:	20000e90 	.word	0x20000e90
 8003f08:	200009b8 	.word	0x200009b8
 8003f0c:	e000ed04 	.word	0xe000ed04

08003f10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <vTaskDelay+0x60>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <vTaskDelay+0x30>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	60bb      	str	r3, [r7, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f40:	f000 f88a 	bl	8004058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f44:	2100      	movs	r1, #0
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fd04 	bl	8004954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f4c:	f000 f892 	bl	8004074 <xTaskResumeAll>
 8003f50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <vTaskDelay+0x64>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000eb0 	.word	0x20000eb0
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f86:	463a      	mov	r2, r7
 8003f88:	1d39      	adds	r1, r7, #4
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f848 	bl	8003024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	9202      	str	r2, [sp, #8]
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	4924      	ldr	r1, [pc, #144]	; (8004038 <vTaskStartScheduler+0xc0>)
 8003fa8:	4824      	ldr	r0, [pc, #144]	; (800403c <vTaskStartScheduler+0xc4>)
 8003faa:	f7ff fe01 	bl	8003bb0 <xTaskCreateStatic>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <vTaskStartScheduler+0xc8>)
 8003fb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fb4:	4b22      	ldr	r3, [pc, #136]	; (8004040 <vTaskStartScheduler+0xc8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e001      	b.n	8003fc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d102      	bne.n	8003fd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fcc:	f000 fd16 	bl	80049fc <xTimerCreateTimerTask>
 8003fd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d11b      	bne.n	8004010 <vTaskStartScheduler+0x98>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	613b      	str	r3, [r7, #16]
}
 8003fea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fec:	4b15      	ldr	r3, [pc, #84]	; (8004044 <vTaskStartScheduler+0xcc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3354      	adds	r3, #84	; 0x54
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <vTaskStartScheduler+0xd0>)
 8003ff4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <vTaskStartScheduler+0xd4>)
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <vTaskStartScheduler+0xd8>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <vTaskStartScheduler+0xdc>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800400a:	f001 f885 	bl	8005118 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800400e:	e00e      	b.n	800402e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d10a      	bne.n	800402e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <vTaskStartScheduler+0xb4>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	080059d4 	.word	0x080059d4
 800403c:	08004681 	.word	0x08004681
 8004040:	20000eac 	.word	0x20000eac
 8004044:	200009b4 	.word	0x200009b4
 8004048:	20000010 	.word	0x20000010
 800404c:	20000ea8 	.word	0x20000ea8
 8004050:	20000e94 	.word	0x20000e94
 8004054:	20000e8c 	.word	0x20000e8c

08004058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <vTaskSuspendAll+0x18>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	4a03      	ldr	r2, [pc, #12]	; (8004070 <vTaskSuspendAll+0x18>)
 8004064:	6013      	str	r3, [r2, #0]
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000eb0 	.word	0x20000eb0

08004074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004082:	4b42      	ldr	r3, [pc, #264]	; (800418c <xTaskResumeAll+0x118>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040a0:	f001 f8ac 	bl	80051fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <xTaskResumeAll+0x118>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	4a38      	ldr	r2, [pc, #224]	; (800418c <xTaskResumeAll+0x118>)
 80040ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <xTaskResumeAll+0x118>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d162      	bne.n	800417c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <xTaskResumeAll+0x11c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d05e      	beq.n	800417c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040be:	e02f      	b.n	8004120 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <xTaskResumeAll+0x120>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff f861 	bl	8003194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3304      	adds	r3, #4
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f85c 	bl	8003194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <xTaskResumeAll+0x124>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d903      	bls.n	80040f0 <xTaskResumeAll+0x7c>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <xTaskResumeAll+0x124>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a27      	ldr	r2, [pc, #156]	; (800419c <xTaskResumeAll+0x128>)
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7fe ffe9 	bl	80030de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <xTaskResumeAll+0x12c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <xTaskResumeAll+0x130>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <xTaskResumeAll+0x120>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1cb      	bne.n	80040c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800412e:	f000 fb61 	bl	80047f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <xTaskResumeAll+0x134>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d010      	beq.n	8004160 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800413e:	f000 f845 	bl	80041cc <xTaskIncrementTick>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <xTaskResumeAll+0x130>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3b01      	subs	r3, #1
 8004152:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f1      	bne.n	800413e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <xTaskResumeAll+0x134>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <xTaskResumeAll+0x130>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d009      	beq.n	800417c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <xTaskResumeAll+0x138>)
 800416e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800417c:	f001 f86e 	bl	800525c <vPortExitCritical>

	return xAlreadyYielded;
 8004180:	68bb      	ldr	r3, [r7, #8]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000eb0 	.word	0x20000eb0
 8004190:	20000e88 	.word	0x20000e88
 8004194:	20000e48 	.word	0x20000e48
 8004198:	20000e90 	.word	0x20000e90
 800419c:	200009b8 	.word	0x200009b8
 80041a0:	200009b4 	.word	0x200009b4
 80041a4:	20000e9c 	.word	0x20000e9c
 80041a8:	20000e98 	.word	0x20000e98
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <xTaskGetTickCount+0x18>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041bc:	687b      	ldr	r3, [r7, #4]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000e8c 	.word	0x20000e8c

080041cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d6:	4b51      	ldr	r3, [pc, #324]	; (800431c <xTaskIncrementTick+0x150>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 808e 	bne.w	80042fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e0:	4b4f      	ldr	r3, [pc, #316]	; (8004320 <xTaskIncrementTick+0x154>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041e8:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <xTaskIncrementTick+0x154>)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d120      	bne.n	8004236 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041f4:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <xTaskIncrementTick+0x158>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <xTaskIncrementTick+0x48>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xTaskIncrementTick+0x46>
 8004214:	4b43      	ldr	r3, [pc, #268]	; (8004324 <xTaskIncrementTick+0x158>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4b43      	ldr	r3, [pc, #268]	; (8004328 <xTaskIncrementTick+0x15c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a41      	ldr	r2, [pc, #260]	; (8004324 <xTaskIncrementTick+0x158>)
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4a41      	ldr	r2, [pc, #260]	; (8004328 <xTaskIncrementTick+0x15c>)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <xTaskIncrementTick+0x160>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3301      	adds	r3, #1
 800422e:	4a3f      	ldr	r2, [pc, #252]	; (800432c <xTaskIncrementTick+0x160>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	f000 fadf 	bl	80047f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004236:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <xTaskIncrementTick+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d34e      	bcc.n	80042de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004240:	4b38      	ldr	r3, [pc, #224]	; (8004324 <xTaskIncrementTick+0x158>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <xTaskIncrementTick+0x82>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <xTaskIncrementTick+0x84>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <xTaskIncrementTick+0x164>)
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	601a      	str	r2, [r3, #0]
					break;
 800425c:	e03f      	b.n	80042de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <xTaskIncrementTick+0x158>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	d203      	bcs.n	800427e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004276:	4a2e      	ldr	r2, [pc, #184]	; (8004330 <xTaskIncrementTick+0x164>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6013      	str	r3, [r2, #0]
						break;
 800427c:	e02f      	b.n	80042de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3304      	adds	r3, #4
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe ff86 	bl	8003194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3318      	adds	r3, #24
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe ff7d 	bl	8003194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	4b25      	ldr	r3, [pc, #148]	; (8004334 <xTaskIncrementTick+0x168>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d903      	bls.n	80042ae <xTaskIncrementTick+0xe2>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a22      	ldr	r2, [pc, #136]	; (8004334 <xTaskIncrementTick+0x168>)
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <xTaskIncrementTick+0x16c>)
 80042bc:	441a      	add	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fe ff0a 	bl	80030de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <xTaskIncrementTick+0x170>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d3b3      	bcc.n	8004240 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042dc:	e7b0      	b.n	8004240 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042de:	4b17      	ldr	r3, [pc, #92]	; (800433c <xTaskIncrementTick+0x170>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4914      	ldr	r1, [pc, #80]	; (8004338 <xTaskIncrementTick+0x16c>)
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d907      	bls.n	8004306 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80042f6:	2301      	movs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	e004      	b.n	8004306 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <xTaskIncrementTick+0x174>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a0f      	ldr	r2, [pc, #60]	; (8004340 <xTaskIncrementTick+0x174>)
 8004304:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <xTaskIncrementTick+0x178>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800430e:	2301      	movs	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000eb0 	.word	0x20000eb0
 8004320:	20000e8c 	.word	0x20000e8c
 8004324:	20000e40 	.word	0x20000e40
 8004328:	20000e44 	.word	0x20000e44
 800432c:	20000ea0 	.word	0x20000ea0
 8004330:	20000ea8 	.word	0x20000ea8
 8004334:	20000e90 	.word	0x20000e90
 8004338:	200009b8 	.word	0x200009b8
 800433c:	200009b4 	.word	0x200009b4
 8004340:	20000e98 	.word	0x20000e98
 8004344:	20000e9c 	.word	0x20000e9c

08004348 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <vTaskSwitchContext+0xb0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800435c:	e046      	b.n	80043ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <vTaskSwitchContext+0xb4>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <vTaskSwitchContext+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e010      	b.n	800438e <vTaskSwitchContext+0x46>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <vTaskSwitchContext+0x40>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	607b      	str	r3, [r7, #4]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <vTaskSwitchContext+0x3e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	491d      	ldr	r1, [pc, #116]	; (8004404 <vTaskSwitchContext+0xbc>)
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0e4      	beq.n	800436c <vTaskSwitchContext+0x24>
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <vTaskSwitchContext+0xbc>)
 80043ae:	4413      	add	r3, r2
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	3308      	adds	r3, #8
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d104      	bne.n	80043d2 <vTaskSwitchContext+0x8a>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4a08      	ldr	r2, [pc, #32]	; (8004400 <vTaskSwitchContext+0xb8>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <vTaskSwitchContext+0xc0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3354      	adds	r3, #84	; 0x54
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <vTaskSwitchContext+0xc4>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000eb0 	.word	0x20000eb0
 80043fc:	20000e9c 	.word	0x20000e9c
 8004400:	20000e90 	.word	0x20000e90
 8004404:	200009b8 	.word	0x200009b8
 8004408:	200009b4 	.word	0x200009b4
 800440c:	20000010 	.word	0x20000010

08004410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <vTaskPlaceOnEventList+0x44>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3318      	adds	r3, #24
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe fe70 	bl	8003124 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004444:	2101      	movs	r1, #1
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f000 fa84 	bl	8004954 <prvAddCurrentTaskToDelayedList>
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200009b4 	.word	0x200009b4

08004458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	617b      	str	r3, [r7, #20]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <vTaskPlaceOnEventListRestricted+0x54>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3318      	adds	r3, #24
 8004486:	4619      	mov	r1, r3
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7fe fe28 	bl	80030de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004494:	f04f 33ff 	mov.w	r3, #4294967295
 8004498:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f000 fa59 	bl	8004954 <prvAddCurrentTaskToDelayedList>
	}
 80044a2:	bf00      	nop
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200009b4 	.word	0x200009b4

080044b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fe57 	bl	8003194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <xTaskRemoveFromEventList+0xb0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fe4e 	bl	8003194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <xTaskRemoveFromEventList+0xb4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d903      	bls.n	800450c <xTaskRemoveFromEventList+0x5c>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <xTaskRemoveFromEventList+0xb4>)
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4a13      	ldr	r2, [pc, #76]	; (8004568 <xTaskRemoveFromEventList+0xb8>)
 800451a:	441a      	add	r2, r3
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe fddb 	bl	80030de <vListInsertEnd>
 8004528:	e005      	b.n	8004536 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	3318      	adds	r3, #24
 800452e:	4619      	mov	r1, r3
 8004530:	480e      	ldr	r0, [pc, #56]	; (800456c <xTaskRemoveFromEventList+0xbc>)
 8004532:	f7fe fdd4 	bl	80030de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <xTaskRemoveFromEventList+0xc0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d905      	bls.n	8004550 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <xTaskRemoveFromEventList+0xc4>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e001      	b.n	8004554 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004554:	697b      	ldr	r3, [r7, #20]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000eb0 	.word	0x20000eb0
 8004564:	20000e90 	.word	0x20000e90
 8004568:	200009b8 	.word	0x200009b8
 800456c:	20000e48 	.word	0x20000e48
 8004570:	200009b4 	.word	0x200009b4
 8004574:	20000e9c 	.word	0x20000e9c

08004578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <vTaskInternalSetTimeOutState+0x24>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <vTaskInternalSetTimeOutState+0x28>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	605a      	str	r2, [r3, #4]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000ea0 	.word	0x20000ea0
 80045a0:	20000e8c 	.word	0x20000e8c

080045a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	613b      	str	r3, [r7, #16]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045e6:	f000 fe09 	bl	80051fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <xTaskCheckForTimeOut+0xbc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d102      	bne.n	800460a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e023      	b.n	8004652 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <xTaskCheckForTimeOut+0xc0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d007      	beq.n	8004626 <xTaskCheckForTimeOut+0x82>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e015      	b.n	8004652 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	429a      	cmp	r2, r3
 800462e:	d20b      	bcs.n	8004648 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff9b 	bl	8004578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e004      	b.n	8004652 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004652:	f000 fe03 	bl	800525c <vPortExitCritical>

	return xReturn;
 8004656:	69fb      	ldr	r3, [r7, #28]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000e8c 	.word	0x20000e8c
 8004664:	20000ea0 	.word	0x20000ea0

08004668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <vTaskMissedYield+0x14>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000e9c 	.word	0x20000e9c

08004680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004688:	f000 f852 	bl	8004730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <prvIdleTask+0x28>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d9f9      	bls.n	8004688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <prvIdleTask+0x2c>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046a4:	e7f0      	b.n	8004688 <prvIdleTask+0x8>
 80046a6:	bf00      	nop
 80046a8:	200009b8 	.word	0x200009b8
 80046ac:	e000ed04 	.word	0xe000ed04

080046b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	e00c      	b.n	80046d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a12      	ldr	r2, [pc, #72]	; (8004710 <prvInitialiseTaskLists+0x60>)
 80046c8:	4413      	add	r3, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fcdc 	bl	8003088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3301      	adds	r3, #1
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b37      	cmp	r3, #55	; 0x37
 80046da:	d9ef      	bls.n	80046bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046dc:	480d      	ldr	r0, [pc, #52]	; (8004714 <prvInitialiseTaskLists+0x64>)
 80046de:	f7fe fcd3 	bl	8003088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046e2:	480d      	ldr	r0, [pc, #52]	; (8004718 <prvInitialiseTaskLists+0x68>)
 80046e4:	f7fe fcd0 	bl	8003088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046e8:	480c      	ldr	r0, [pc, #48]	; (800471c <prvInitialiseTaskLists+0x6c>)
 80046ea:	f7fe fccd 	bl	8003088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046ee:	480c      	ldr	r0, [pc, #48]	; (8004720 <prvInitialiseTaskLists+0x70>)
 80046f0:	f7fe fcca 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046f4:	480b      	ldr	r0, [pc, #44]	; (8004724 <prvInitialiseTaskLists+0x74>)
 80046f6:	f7fe fcc7 	bl	8003088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <prvInitialiseTaskLists+0x78>)
 80046fc:	4a05      	ldr	r2, [pc, #20]	; (8004714 <prvInitialiseTaskLists+0x64>)
 80046fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvInitialiseTaskLists+0x7c>)
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <prvInitialiseTaskLists+0x68>)
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200009b8 	.word	0x200009b8
 8004714:	20000e18 	.word	0x20000e18
 8004718:	20000e2c 	.word	0x20000e2c
 800471c:	20000e48 	.word	0x20000e48
 8004720:	20000e5c 	.word	0x20000e5c
 8004724:	20000e74 	.word	0x20000e74
 8004728:	20000e40 	.word	0x20000e40
 800472c:	20000e44 	.word	0x20000e44

08004730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004736:	e019      	b.n	800476c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004738:	f000 fd60 	bl	80051fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <prvCheckTasksWaitingTermination+0x50>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fd23 	bl	8003194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800474e:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <prvCheckTasksWaitingTermination+0x54>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3b01      	subs	r3, #1
 8004754:	4a0b      	ldr	r2, [pc, #44]	; (8004784 <prvCheckTasksWaitingTermination+0x54>)
 8004756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <prvCheckTasksWaitingTermination+0x58>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3b01      	subs	r3, #1
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <prvCheckTasksWaitingTermination+0x58>)
 8004760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004762:	f000 fd7b 	bl	800525c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f810 	bl	800478c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <prvCheckTasksWaitingTermination+0x58>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e1      	bne.n	8004738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000e5c 	.word	0x20000e5c
 8004784:	20000e88 	.word	0x20000e88
 8004788:	20000e70 	.word	0x20000e70

0800478c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3354      	adds	r3, #84	; 0x54
 8004798:	4618      	mov	r0, r3
 800479a:	f001 f851 	bl	8005840 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fee9 	bl	8005584 <vPortFree>
				vPortFree( pxTCB );
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fee6 	bl	8005584 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b8:	e018      	b.n	80047ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d103      	bne.n	80047cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fedd 	bl	8005584 <vPortFree>
	}
 80047ca:	e00f      	b.n	80047ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d00a      	beq.n	80047ec <prvDeleteTCB+0x60>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60fb      	str	r3, [r7, #12]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <prvDeleteTCB+0x5e>
	}
 80047ec:	bf00      	nop
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <prvResetNextTaskUnblockTime+0x40>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <prvResetNextTaskUnblockTime+0x14>
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <prvResetNextTaskUnblockTime+0x16>
 8004808:	2300      	movs	r3, #0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <prvResetNextTaskUnblockTime+0x44>)
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004816:	e008      	b.n	800482a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <prvResetNextTaskUnblockTime+0x40>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvResetNextTaskUnblockTime+0x44>)
 8004828:	6013      	str	r3, [r2, #0]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	20000e40 	.word	0x20000e40
 8004838:	20000ea8 	.word	0x20000ea8

0800483c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <xTaskGetSchedulerState+0x34>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800484a:	2301      	movs	r3, #1
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	e008      	b.n	8004862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <xTaskGetSchedulerState+0x38>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004858:	2302      	movs	r3, #2
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	e001      	b.n	8004862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004862:	687b      	ldr	r3, [r7, #4]
	}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000e94 	.word	0x20000e94
 8004874:	20000eb0 	.word	0x20000eb0

08004878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d056      	beq.n	800493c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <xTaskPriorityDisinherit+0xd0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d00a      	beq.n	80048ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d02c      	beq.n	800493c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d128      	bne.n	800493c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fc50 	bl	8003194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <xTaskPriorityDisinherit+0xd4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d903      	bls.n	800491c <xTaskPriorityDisinherit+0xa4>
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a0c      	ldr	r2, [pc, #48]	; (800494c <xTaskPriorityDisinherit+0xd4>)
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <xTaskPriorityDisinherit+0xd8>)
 800492a:	441a      	add	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fbd3 	bl	80030de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800493c:	697b      	ldr	r3, [r7, #20]
	}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200009b4 	.word	0x200009b4
 800494c:	20000e90 	.word	0x20000e90
 8004950:	200009b8 	.word	0x200009b8

08004954 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800495e:	4b21      	ldr	r3, [pc, #132]	; (80049e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3304      	adds	r3, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fc12 	bl	8003194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d10a      	bne.n	800498e <prvAddCurrentTaskToDelayedList+0x3a>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4819      	ldr	r0, [pc, #100]	; (80049ec <prvAddCurrentTaskToDelayedList+0x98>)
 8004988:	f7fe fba9 	bl	80030de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800498c:	e026      	b.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d209      	bcs.n	80049ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fe fbb6 	bl	8003124 <vListInsert>
}
 80049b8:	e010      	b.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe fbac 	bl	8003124 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d202      	bcs.n	80049dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000e8c 	.word	0x20000e8c
 80049e8:	200009b4 	.word	0x200009b4
 80049ec:	20000e74 	.word	0x20000e74
 80049f0:	20000e44 	.word	0x20000e44
 80049f4:	20000e40 	.word	0x20000e40
 80049f8:	20000ea8 	.word	0x20000ea8

080049fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	; 0x28
 8004a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a06:	f000 facb 	bl	8004fa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <xTimerCreateTimerTask+0x80>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d021      	beq.n	8004a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a1a:	1d3a      	adds	r2, r7, #4
 8004a1c:	f107 0108 	add.w	r1, r7, #8
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fb15 	bl	8003054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	9202      	str	r2, [sp, #8]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	2302      	movs	r3, #2
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	460a      	mov	r2, r1
 8004a3c:	4910      	ldr	r1, [pc, #64]	; (8004a80 <xTimerCreateTimerTask+0x84>)
 8004a3e:	4811      	ldr	r0, [pc, #68]	; (8004a84 <xTimerCreateTimerTask+0x88>)
 8004a40:	f7ff f8b6 	bl	8003bb0 <xTaskCreateStatic>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <xTimerCreateTimerTask+0x8c>)
 8004a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <xTimerCreateTimerTask+0x8c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a52:	2301      	movs	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	613b      	str	r3, [r7, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20000ee4 	.word	0x20000ee4
 8004a80:	080059dc 	.word	0x080059dc
 8004a84:	08004ba9 	.word	0x08004ba9
 8004a88:	20000ee8 	.word	0x20000ee8

08004a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xTimerGenericCommand+0x2e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	623b      	str	r3, [r7, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02a      	beq.n	8004b18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b05      	cmp	r3, #5
 8004ad2:	dc18      	bgt.n	8004b06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ad4:	f7ff feb2 	bl	800483c <xTaskGetSchedulerState>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d109      	bne.n	8004af2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f107 0110 	add.w	r1, r7, #16
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aea:	f7fe fc7f 	bl	80033ec <xQueueGenericSend>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
 8004af0:	e012      	b.n	8004b18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f107 0110 	add.w	r1, r7, #16
 8004afa:	2300      	movs	r3, #0
 8004afc:	2200      	movs	r2, #0
 8004afe:	f7fe fc75 	bl	80033ec <xQueueGenericSend>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24
 8004b04:	e008      	b.n	8004b18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <xTimerGenericCommand+0x98>)
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f107 0110 	add.w	r1, r7, #16
 8004b0e:	2300      	movs	r3, #0
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	f7fe fd69 	bl	80035e8 <xQueueGenericSendFromISR>
 8004b16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3728      	adds	r7, #40	; 0x28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000ee4 	.word	0x20000ee4

08004b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <prvProcessExpiredTimer+0x7c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fb27 	bl	8003194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d122      	bne.n	8004b94 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	18d1      	adds	r1, r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	6978      	ldr	r0, [r7, #20]
 8004b5c:	f000 f8c8 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b66:	2300      	movs	r3, #0
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	2100      	movs	r1, #0
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	f7ff ff8b 	bl	8004a8c <xTimerGenericCommand>
 8004b76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	60fb      	str	r3, [r7, #12]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	4798      	blx	r3
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000edc 	.word	0x20000edc

08004ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 f857 	bl	8004c68 <prvGetNextExpireTime>
 8004bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f803 	bl	8004bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bc6:	f000 f8d5 	bl	8004d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bca:	e7f1      	b.n	8004bb0 <prvTimerTask+0x8>

08004bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bd6:	f7ff fa3f 	bl	8004058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f866 	bl	8004cb0 <prvSampleTimeNow>
 8004be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d130      	bne.n	8004c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d806      	bhi.n	8004c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bfa:	f7ff fa3b 	bl	8004074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff91 	bl	8004b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c06:	e024      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <prvProcessTimerOrBlockTask+0x90>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <prvProcessTimerOrBlockTask+0x94>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	f7fe ff8b 	bl	8003b48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f7ff fa1f 	bl	8004074 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <prvProcessTimerOrBlockTask+0x98>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
}
 8004c4c:	e001      	b.n	8004c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c4e:	f7ff fa11 	bl	8004074 <xTaskResumeAll>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000ee0 	.word	0x20000ee0
 8004c60:	20000ee4 	.word	0x20000ee4
 8004c64:	e000ed04 	.word	0xe000ed04

08004c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c70:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvGetNextExpireTime+0x44>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e001      	b.n	8004c9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000edc 	.word	0x20000edc

08004cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cb8:	f7ff fa7a 	bl	80041b0 <xTaskGetTickCount>
 8004cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d205      	bcs.n	8004cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cc8:	f000 f908 	bl	8004edc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <prvSampleTimeNow+0x3c>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000eec 	.word	0x20000eec

08004cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d812      	bhi.n	8004d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e01b      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <prvInsertTimerInActiveList+0x7c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f9f5 	bl	8003124 <vListInsert>
 8004d3a:	e012      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d206      	bcs.n	8004d52 <prvInsertTimerInActiveList+0x62>
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e007      	b.n	8004d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <prvInsertTimerInActiveList+0x80>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fe f9e1 	bl	8003124 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d62:	697b      	ldr	r3, [r7, #20]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000ee0 	.word	0x20000ee0
 8004d70:	20000edc 	.word	0x20000edc

08004d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08e      	sub	sp, #56	; 0x38
 8004d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7a:	e09d      	b.n	8004eb8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	da18      	bge.n	8004db4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	3304      	adds	r3, #4
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	61fb      	str	r3, [r7, #28]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004daa:	6850      	ldr	r0, [r2, #4]
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	6892      	ldr	r2, [r2, #8]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	db7d      	blt.n	8004eb6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f9e2 	bl	8003194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff ff6c 	bl	8004cb0 <prvSampleTimeNow>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b09      	cmp	r3, #9
 8004dde:	d86b      	bhi.n	8004eb8 <prvProcessReceivedCommands+0x144>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <prvProcessReceivedCommands+0x74>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	08004e11 	.word	0x08004e11
 8004df4:	08004eb9 	.word	0x08004eb9
 8004df8:	08004e6d 	.word	0x08004e6d
 8004dfc:	08004ea5 	.word	0x08004ea5
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e11 	.word	0x08004e11
 8004e08:	08004eb9 	.word	0x08004eb9
 8004e0c:	08004e6d 	.word	0x08004e6d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	18d1      	adds	r1, r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1e:	f7ff ff67 	bl	8004cf0 <prvInsertTimerInActiveList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d047      	beq.n	8004eb8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d13f      	bne.n	8004eb8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	441a      	add	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	2100      	movs	r1, #0
 8004e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e4a:	f7ff fe1f 	bl	8004a8c <xTimerGenericCommand>
 8004e4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d130      	bne.n	8004eb8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	61bb      	str	r3, [r7, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	617b      	str	r3, [r7, #20]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	18d1      	adds	r1, r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9e:	f7ff ff27 	bl	8004cf0 <prvInsertTimerInActiveList>
					break;
 8004ea2:	e009      	b.n	8004eb8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb0:	f000 fb68 	bl	8005584 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eb4:	e000      	b.n	8004eb8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004eb6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eb8:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <prvProcessReceivedCommands+0x164>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	1d39      	adds	r1, r7, #4
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe fc29 	bl	8003718 <xQueueReceive>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f af57 	bne.w	8004d7c <prvProcessReceivedCommands+0x8>
	}
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	3730      	adds	r7, #48	; 0x30
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000ee4 	.word	0x20000ee4

08004edc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee2:	e045      	b.n	8004f70 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eee:	4b2a      	ldr	r3, [pc, #168]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe f949 	bl	8003194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d12e      	bne.n	8004f70 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d90e      	bls.n	8004f42 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fe f8f2 	bl	8003124 <vListInsert>
 8004f40:	e016      	b.n	8004f70 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f42:	2300      	movs	r3, #0
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2300      	movs	r3, #0
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fd9d 	bl	8004a8c <xTimerGenericCommand>
 8004f52:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1b4      	bne.n	8004ee4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <prvSwitchTimerLists+0xbc>)
 8004f86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <prvSwitchTimerLists+0xc0>)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000edc 	.word	0x20000edc
 8004f9c:	20000ee0 	.word	0x20000ee0

08004fa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fa6:	f000 f929 	bl	80051fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <prvCheckForValidListAndQueue+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d120      	bne.n	8004ff4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fb2:	4814      	ldr	r0, [pc, #80]	; (8005004 <prvCheckForValidListAndQueue+0x64>)
 8004fb4:	f7fe f868 	bl	8003088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fb8:	4813      	ldr	r0, [pc, #76]	; (8005008 <prvCheckForValidListAndQueue+0x68>)
 8004fba:	f7fe f865 	bl	8003088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <prvCheckForValidListAndQueue+0x6c>)
 8004fc0:	4a10      	ldr	r2, [pc, #64]	; (8005004 <prvCheckForValidListAndQueue+0x64>)
 8004fc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fc4:	4b12      	ldr	r3, [pc, #72]	; (8005010 <prvCheckForValidListAndQueue+0x70>)
 8004fc6:	4a10      	ldr	r2, [pc, #64]	; (8005008 <prvCheckForValidListAndQueue+0x68>)
 8004fc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <prvCheckForValidListAndQueue+0x74>)
 8004fd0:	4a11      	ldr	r2, [pc, #68]	; (8005018 <prvCheckForValidListAndQueue+0x78>)
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	200a      	movs	r0, #10
 8004fd6:	f7fe f96f 	bl	80032b8 <xQueueGenericCreateStatic>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <prvCheckForValidListAndQueue+0x60>)
 8004fde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <prvCheckForValidListAndQueue+0x60>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <prvCheckForValidListAndQueue+0x60>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	490b      	ldr	r1, [pc, #44]	; (800501c <prvCheckForValidListAndQueue+0x7c>)
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fd82 	bl	8003af8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ff4:	f000 f932 	bl	800525c <vPortExitCritical>
}
 8004ff8:	bf00      	nop
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000ee4 	.word	0x20000ee4
 8005004:	20000eb4 	.word	0x20000eb4
 8005008:	20000ec8 	.word	0x20000ec8
 800500c:	20000edc 	.word	0x20000edc
 8005010:	20000ee0 	.word	0x20000ee0
 8005014:	20000f90 	.word	0x20000f90
 8005018:	20000ef0 	.word	0x20000ef0
 800501c:	080059e4 	.word	0x080059e4

08005020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3b04      	subs	r3, #4
 8005030:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b04      	subs	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b04      	subs	r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005050:	4a08      	ldr	r2, [pc, #32]	; (8005074 <pxPortInitialiseStack+0x54>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b14      	subs	r3, #20
 800505a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b20      	subs	r3, #32
 8005066:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	08005079 	.word	0x08005079

08005078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <prvTaskExitError+0x54>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d00a      	beq.n	80050a2 <prvTaskExitError+0x2a>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60fb      	str	r3, [r7, #12]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <prvTaskExitError+0x28>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050b6:	bf00      	nop
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0fc      	beq.n	80050b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80050ee:	4770      	bx	lr

080050f0 <pxCurrentTCBConst2>:
 80050f0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050f8:	4806      	ldr	r0, [pc, #24]	; (8005114 <prvPortStartFirstTask+0x1c>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	b662      	cpsie	i
 8005104:	b661      	cpsie	f
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	df00      	svc	0
 8005110:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005112:	bf00      	nop
 8005114:	e000ed08 	.word	0xe000ed08

08005118 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800511e:	4b32      	ldr	r3, [pc, #200]	; (80051e8 <xPortStartScheduler+0xd0>)
 8005120:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005140:	b2da      	uxtb	r2, r3
 8005142:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <xPortStartScheduler+0xd4>)
 8005144:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005146:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800514c:	e009      	b.n	8005162 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005156:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b80      	cmp	r3, #128	; 0x80
 800516c:	d0ef      	beq.n	800514e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f1c3 0307 	rsb	r3, r3, #7
 8005176:	2b04      	cmp	r3, #4
 8005178:	d00a      	beq.n	8005190 <xPortStartScheduler+0x78>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60bb      	str	r3, [r7, #8]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <xPortStartScheduler+0xd8>)
 8005198:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <xPortStartScheduler+0xd8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051a2:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <xPortStartScheduler+0xd8>)
 80051a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <xPortStartScheduler+0xdc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <xPortStartScheduler+0xdc>)
 80051b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ba:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <xPortStartScheduler+0xdc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <xPortStartScheduler+0xdc>)
 80051c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051c6:	f000 f8b9 	bl	800533c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <xPortStartScheduler+0xe0>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051d0:	f7ff ff92 	bl	80050f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051d4:	f7ff f8b8 	bl	8004348 <vTaskSwitchContext>
	prvTaskExitError();
 80051d8:	f7ff ff4e 	bl	8005078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	e000e400 	.word	0xe000e400
 80051ec:	20000fe0 	.word	0x20000fe0
 80051f0:	20000fe4 	.word	0x20000fe4
 80051f4:	e000ed20 	.word	0xe000ed20
 80051f8:	2000000c 	.word	0x2000000c

080051fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	607b      	str	r3, [r7, #4]
}
 8005214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <vPortEnterCritical+0x58>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <vPortEnterCritical+0x58>)
 800521e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <vPortEnterCritical+0x58>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10f      	bne.n	8005248 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <vPortEnterCritical+0x5c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <vPortEnterCritical+0x4c>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	603b      	str	r3, [r7, #0]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <vPortEnterCritical+0x4a>
	}
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <vPortExitCritical+0x4c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <vPortExitCritical+0x24>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005280:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <vPortExitCritical+0x4c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3b01      	subs	r3, #1
 8005286:	4a08      	ldr	r2, [pc, #32]	; (80052a8 <vPortExitCritical+0x4c>)
 8005288:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <vPortExitCritical+0x4c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <vPortExitCritical+0x42>
 8005292:	2300      	movs	r3, #0
 8005294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f383 8811 	msr	BASEPRI, r3
}
 800529c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	00000000 	.word	0x00000000

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <pxCurrentTCBConst>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052c0:	6010      	str	r0, [r2, #0]
 80052c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80052ca:	f380 8811 	msr	BASEPRI, r0
 80052ce:	f7ff f83b 	bl	8004348 <vTaskSwitchContext>
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8811 	msr	BASEPRI, r0
 80052da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052de:	6819      	ldr	r1, [r3, #0]
 80052e0:	6808      	ldr	r0, [r1, #0]
 80052e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052e6:	f380 8809 	msr	PSP, r0
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	4770      	bx	lr

080052f0 <pxCurrentTCBConst>:
 80052f0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
}
 8005310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005312:	f7fe ff5b 	bl	80041cc <xTaskIncrementTick>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <SysTick_Handler+0x40>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	2300      	movs	r3, #0
 8005326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f383 8811 	msr	BASEPRI, r3
}
 800532e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <vPortSetupTimerInterrupt+0x30>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <vPortSetupTimerInterrupt+0x34>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <vPortSetupTimerInterrupt+0x38>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a09      	ldr	r2, [pc, #36]	; (8005378 <vPortSetupTimerInterrupt+0x3c>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	4a08      	ldr	r2, [pc, #32]	; (800537c <vPortSetupTimerInterrupt+0x40>)
 800535a:	3b01      	subs	r3, #1
 800535c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800535e:	4b03      	ldr	r3, [pc, #12]	; (800536c <vPortSetupTimerInterrupt+0x30>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	e000e010 	.word	0xe000e010
 8005370:	e000e018 	.word	0xe000e018
 8005374:	20000000 	.word	0x20000000
 8005378:	10624dd3 	.word	0x10624dd3
 800537c:	e000e014 	.word	0xe000e014

08005380 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005386:	f3ef 8305 	mrs	r3, IPSR
 800538a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	d914      	bls.n	80053bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <vPortValidateInterruptPriority+0x6c>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <vPortValidateInterruptPriority+0x70>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	7afa      	ldrb	r2, [r7, #11]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d20a      	bcs.n	80053bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	607b      	str	r3, [r7, #4]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <vPortValidateInterruptPriority+0x74>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <vPortValidateInterruptPriority+0x78>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d90a      	bls.n	80053e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	603b      	str	r3, [r7, #0]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <vPortValidateInterruptPriority+0x60>
	}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	e000e3f0 	.word	0xe000e3f0
 80053f0:	20000fe0 	.word	0x20000fe0
 80053f4:	e000ed0c 	.word	0xe000ed0c
 80053f8:	20000fe4 	.word	0x20000fe4

080053fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005408:	f7fe fe26 	bl	8004058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800540c:	4b58      	ldr	r3, [pc, #352]	; (8005570 <pvPortMalloc+0x174>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005414:	f000 f910 	bl	8005638 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005418:	4b56      	ldr	r3, [pc, #344]	; (8005574 <pvPortMalloc+0x178>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 808e 	bne.w	8005542 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01d      	beq.n	8005468 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800542c:	2208      	movs	r2, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d014      	beq.n	8005468 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f023 0307 	bic.w	r3, r3, #7
 8005444:	3308      	adds	r3, #8
 8005446:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <pvPortMalloc+0x6c>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	617b      	str	r3, [r7, #20]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d069      	beq.n	8005542 <pvPortMalloc+0x146>
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <pvPortMalloc+0x17c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d864      	bhi.n	8005542 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005478:	4b40      	ldr	r3, [pc, #256]	; (800557c <pvPortMalloc+0x180>)
 800547a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <pvPortMalloc+0x180>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005482:	e004      	b.n	800548e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d903      	bls.n	80054a0 <pvPortMalloc+0xa4>
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f1      	bne.n	8005484 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054a0:	4b33      	ldr	r3, [pc, #204]	; (8005570 <pvPortMalloc+0x174>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d04b      	beq.n	8005542 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2208      	movs	r2, #8
 80054b0:	4413      	add	r3, r2
 80054b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	2308      	movs	r3, #8
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d91f      	bls.n	800550c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4413      	add	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <pvPortMalloc+0xf8>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	613b      	str	r3, [r7, #16]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	f000 f8f8 	bl	80056fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <pvPortMalloc+0x17c>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	4a18      	ldr	r2, [pc, #96]	; (8005578 <pvPortMalloc+0x17c>)
 8005518:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <pvPortMalloc+0x17c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <pvPortMalloc+0x184>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d203      	bcs.n	800552e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <pvPortMalloc+0x17c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <pvPortMalloc+0x184>)
 800552c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <pvPortMalloc+0x178>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	431a      	orrs	r2, r3
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005542:	f7fe fd97 	bl	8004074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <pvPortMalloc+0x16a>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <pvPortMalloc+0x168>
	return pvReturn;
 8005566:	69fb      	ldr	r3, [r7, #28]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3728      	adds	r7, #40	; 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20001bf0 	.word	0x20001bf0
 8005574:	20001bfc 	.word	0x20001bfc
 8005578:	20001bf4 	.word	0x20001bf4
 800557c:	20001be8 	.word	0x20001be8
 8005580:	20001bf8 	.word	0x20001bf8

08005584 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d048      	beq.n	8005628 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005596:	2308      	movs	r3, #8
 8005598:	425b      	negs	r3, r3
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4413      	add	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <vPortFree+0xac>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <vPortFree+0x44>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	60fb      	str	r3, [r7, #12]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <vPortFree+0x62>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60bb      	str	r3, [r7, #8]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <vPortFree+0xac>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d019      	beq.n	8005628 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <vPortFree+0xac>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	43db      	mvns	r3, r3
 8005606:	401a      	ands	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800560c:	f7fe fd24 	bl	8004058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <vPortFree+0xb0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4413      	add	r3, r2
 800561a:	4a06      	ldr	r2, [pc, #24]	; (8005634 <vPortFree+0xb0>)
 800561c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800561e:	6938      	ldr	r0, [r7, #16]
 8005620:	f000 f86c 	bl	80056fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005624:	f7fe fd26 	bl	8004074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005628:	bf00      	nop
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001bfc 	.word	0x20001bfc
 8005634:	20001bf4 	.word	0x20001bf4

08005638 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800563e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005642:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005644:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <prvHeapInit+0xac>)
 8005646:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00c      	beq.n	800566c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3307      	adds	r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	4a1f      	ldr	r2, [pc, #124]	; (80056e4 <prvHeapInit+0xac>)
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005670:	4a1d      	ldr	r2, [pc, #116]	; (80056e8 <prvHeapInit+0xb0>)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <prvHeapInit+0xb0>)
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005684:	2208      	movs	r2, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0307 	bic.w	r3, r3, #7
 8005692:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <prvHeapInit+0xb4>)
 8005698:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <prvHeapInit+0xb4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056a2:	4b12      	ldr	r3, [pc, #72]	; (80056ec <prvHeapInit+0xb4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <prvHeapInit+0xb4>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <prvHeapInit+0xb8>)
 80056c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <prvHeapInit+0xbc>)
 80056ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <prvHeapInit+0xc0>)
 80056d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000fe8 	.word	0x20000fe8
 80056e8:	20001be8 	.word	0x20001be8
 80056ec:	20001bf0 	.word	0x20001bf0
 80056f0:	20001bf8 	.word	0x20001bf8
 80056f4:	20001bf4 	.word	0x20001bf4
 80056f8:	20001bfc 	.word	0x20001bfc

080056fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005704:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e002      	b.n	8005710 <prvInsertBlockIntoFreeList+0x14>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d8f7      	bhi.n	800570a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4413      	add	r3, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d108      	bne.n	800573e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d118      	bne.n	8005784 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <prvInsertBlockIntoFreeList+0xac>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d00d      	beq.n	800577a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	441a      	add	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e008      	b.n	800578c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <prvInsertBlockIntoFreeList+0xac>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e003      	b.n	800578c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	429a      	cmp	r2, r3
 8005792:	d002      	beq.n	800579a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr
 80057a4:	20001be8 	.word	0x20001be8
 80057a8:	20001bf0 	.word	0x20001bf0

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	2600      	movs	r6, #0
 80057b0:	4d0c      	ldr	r5, [pc, #48]	; (80057e4 <__libc_init_array+0x38>)
 80057b2:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	f000 f8f0 	bl	80059a0 <_init>
 80057c0:	2600      	movs	r6, #0
 80057c2:	4d0a      	ldr	r5, [pc, #40]	; (80057ec <__libc_init_array+0x40>)
 80057c4:	4c0a      	ldr	r4, [pc, #40]	; (80057f0 <__libc_init_array+0x44>)
 80057c6:	1b64      	subs	r4, r4, r5
 80057c8:	10a4      	asrs	r4, r4, #2
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08005a88 	.word	0x08005a88
 80057e8:	08005a88 	.word	0x08005a88
 80057ec:	08005a88 	.word	0x08005a88
 80057f0:	08005a8c 	.word	0x08005a8c

080057f4 <__retarget_lock_acquire_recursive>:
 80057f4:	4770      	bx	lr

080057f6 <__retarget_lock_release_recursive>:
 80057f6:	4770      	bx	lr

080057f8 <memcpy>:
 80057f8:	440a      	add	r2, r1
 80057fa:	4291      	cmp	r1, r2
 80057fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005800:	d100      	bne.n	8005804 <memcpy+0xc>
 8005802:	4770      	bx	lr
 8005804:	b510      	push	{r4, lr}
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	4291      	cmp	r1, r2
 800580c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005810:	d1f9      	bne.n	8005806 <memcpy+0xe>
 8005812:	bd10      	pop	{r4, pc}

08005814 <memset>:
 8005814:	4603      	mov	r3, r0
 8005816:	4402      	add	r2, r0
 8005818:	4293      	cmp	r3, r2
 800581a:	d100      	bne.n	800581e <memset+0xa>
 800581c:	4770      	bx	lr
 800581e:	f803 1b01 	strb.w	r1, [r3], #1
 8005822:	e7f9      	b.n	8005818 <memset+0x4>

08005824 <cleanup_glue>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	460c      	mov	r4, r1
 8005828:	6809      	ldr	r1, [r1, #0]
 800582a:	4605      	mov	r5, r0
 800582c:	b109      	cbz	r1, 8005832 <cleanup_glue+0xe>
 800582e:	f7ff fff9 	bl	8005824 <cleanup_glue>
 8005832:	4621      	mov	r1, r4
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583a:	f000 b869 	b.w	8005910 <_free_r>
	...

08005840 <_reclaim_reent>:
 8005840:	4b2c      	ldr	r3, [pc, #176]	; (80058f4 <_reclaim_reent+0xb4>)
 8005842:	b570      	push	{r4, r5, r6, lr}
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4604      	mov	r4, r0
 8005848:	4283      	cmp	r3, r0
 800584a:	d051      	beq.n	80058f0 <_reclaim_reent+0xb0>
 800584c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800584e:	b143      	cbz	r3, 8005862 <_reclaim_reent+0x22>
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d14a      	bne.n	80058ec <_reclaim_reent+0xac>
 8005856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	b111      	cbz	r1, 8005862 <_reclaim_reent+0x22>
 800585c:	4620      	mov	r0, r4
 800585e:	f000 f857 	bl	8005910 <_free_r>
 8005862:	6961      	ldr	r1, [r4, #20]
 8005864:	b111      	cbz	r1, 800586c <_reclaim_reent+0x2c>
 8005866:	4620      	mov	r0, r4
 8005868:	f000 f852 	bl	8005910 <_free_r>
 800586c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800586e:	b111      	cbz	r1, 8005876 <_reclaim_reent+0x36>
 8005870:	4620      	mov	r0, r4
 8005872:	f000 f84d 	bl	8005910 <_free_r>
 8005876:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005878:	b111      	cbz	r1, 8005880 <_reclaim_reent+0x40>
 800587a:	4620      	mov	r0, r4
 800587c:	f000 f848 	bl	8005910 <_free_r>
 8005880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005882:	b111      	cbz	r1, 800588a <_reclaim_reent+0x4a>
 8005884:	4620      	mov	r0, r4
 8005886:	f000 f843 	bl	8005910 <_free_r>
 800588a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800588c:	b111      	cbz	r1, 8005894 <_reclaim_reent+0x54>
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f83e 	bl	8005910 <_free_r>
 8005894:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005896:	b111      	cbz	r1, 800589e <_reclaim_reent+0x5e>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 f839 	bl	8005910 <_free_r>
 800589e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058a0:	b111      	cbz	r1, 80058a8 <_reclaim_reent+0x68>
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f834 	bl	8005910 <_free_r>
 80058a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058aa:	b111      	cbz	r1, 80058b2 <_reclaim_reent+0x72>
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 f82f 	bl	8005910 <_free_r>
 80058b2:	69a3      	ldr	r3, [r4, #24]
 80058b4:	b1e3      	cbz	r3, 80058f0 <_reclaim_reent+0xb0>
 80058b6:	4620      	mov	r0, r4
 80058b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058ba:	4798      	blx	r3
 80058bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058be:	b1b9      	cbz	r1, 80058f0 <_reclaim_reent+0xb0>
 80058c0:	4620      	mov	r0, r4
 80058c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058c6:	f7ff bfad 	b.w	8005824 <cleanup_glue>
 80058ca:	5949      	ldr	r1, [r1, r5]
 80058cc:	b941      	cbnz	r1, 80058e0 <_reclaim_reent+0xa0>
 80058ce:	3504      	adds	r5, #4
 80058d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d2:	2d80      	cmp	r5, #128	; 0x80
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	d1f8      	bne.n	80058ca <_reclaim_reent+0x8a>
 80058d8:	4620      	mov	r0, r4
 80058da:	f000 f819 	bl	8005910 <_free_r>
 80058de:	e7ba      	b.n	8005856 <_reclaim_reent+0x16>
 80058e0:	680e      	ldr	r6, [r1, #0]
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f814 	bl	8005910 <_free_r>
 80058e8:	4631      	mov	r1, r6
 80058ea:	e7ef      	b.n	80058cc <_reclaim_reent+0x8c>
 80058ec:	2500      	movs	r5, #0
 80058ee:	e7ef      	b.n	80058d0 <_reclaim_reent+0x90>
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
 80058f2:	bf00      	nop
 80058f4:	20000010 	.word	0x20000010

080058f8 <__malloc_lock>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__malloc_lock+0x8>)
 80058fa:	f7ff bf7b 	b.w	80057f4 <__retarget_lock_acquire_recursive>
 80058fe:	bf00      	nop
 8005900:	20001c00 	.word	0x20001c00

08005904 <__malloc_unlock>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__malloc_unlock+0x8>)
 8005906:	f7ff bf76 	b.w	80057f6 <__retarget_lock_release_recursive>
 800590a:	bf00      	nop
 800590c:	20001c00 	.word	0x20001c00

08005910 <_free_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d040      	beq.n	800599a <_free_r+0x8a>
 8005918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591c:	1f0c      	subs	r4, r1, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	18e4      	addlt	r4, r4, r3
 8005924:	f7ff ffe8 	bl	80058f8 <__malloc_lock>
 8005928:	4a1c      	ldr	r2, [pc, #112]	; (800599c <_free_r+0x8c>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	b933      	cbnz	r3, 800593c <_free_r+0x2c>
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	6014      	str	r4, [r2, #0]
 8005932:	4628      	mov	r0, r5
 8005934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005938:	f7ff bfe4 	b.w	8005904 <__malloc_unlock>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	1821      	adds	r1, r4, r0
 8005944:	428b      	cmp	r3, r1
 8005946:	bf01      	itttt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	1809      	addeq	r1, r1, r0
 800594e:	6021      	streq	r1, [r4, #0]
 8005950:	e7ed      	b.n	800592e <_free_r+0x1e>
 8005952:	461a      	mov	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b10b      	cbz	r3, 800595c <_free_r+0x4c>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d9fa      	bls.n	8005952 <_free_r+0x42>
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	1850      	adds	r0, r2, r1
 8005960:	42a0      	cmp	r0, r4
 8005962:	d10b      	bne.n	800597c <_free_r+0x6c>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	4401      	add	r1, r0
 8005968:	1850      	adds	r0, r2, r1
 800596a:	4283      	cmp	r3, r0
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	d1e0      	bne.n	8005932 <_free_r+0x22>
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4401      	add	r1, r0
 8005976:	6011      	str	r1, [r2, #0]
 8005978:	6053      	str	r3, [r2, #4]
 800597a:	e7da      	b.n	8005932 <_free_r+0x22>
 800597c:	d902      	bls.n	8005984 <_free_r+0x74>
 800597e:	230c      	movs	r3, #12
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	e7d6      	b.n	8005932 <_free_r+0x22>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf01      	itttt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	1809      	addeq	r1, r1, r0
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	6063      	str	r3, [r4, #4]
 8005996:	6054      	str	r4, [r2, #4]
 8005998:	e7cb      	b.n	8005932 <_free_r+0x22>
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20001c04 	.word	0x20001c04

080059a0 <_init>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr

080059ac <_fini>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr
