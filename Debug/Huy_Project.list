
Huy_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c68  08005c68  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005c68  08005c68  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c68  08005c68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b94  20000074  08005ce4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  08005ce4  00021c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b141  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1b  00000000  00000000  0003b1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0003ec00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  000403f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000356f  00000000  00000000  00041aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b07a  00000000  00000000  0004500f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3ab  00000000  00000000  00060089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000682c  00000000  00000000  000fb484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b80 	.word	0x08005b80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005b80 	.word	0x08005b80

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbfe 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f820 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f94a 	bl	80003f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f86e 	bl	8000240 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8aa 	bl	80002bc <MX_I2C1_Init>
  MX_IWDG_Init();
 8000168:	f000 f8d6 	bl	8000318 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f8ee 	bl	800034c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f916 	bl	80003a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f002 ff08 	bl	8002f88 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <main+0x40>)
 800017a:	2100      	movs	r1, #0
 800017c:	4805      	ldr	r0, [pc, #20]	; (8000194 <main+0x44>)
 800017e:	f002 ff69 	bl	8003054 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <main+0x48>)
 8000186:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000188:	f002 ff30 	bl	8002fec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	e7fe      	b.n	800018c <main+0x3c>
 800018e:	bf00      	nop
 8000190:	08005bcc 	.word	0x08005bcc
 8000194:	080004a9 	.word	0x080004a9
 8000198:	200001a8 	.word	0x200001a8

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b094      	sub	sp, #80	; 0x50
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a6:	2228      	movs	r2, #40	; 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f005 fc22 	bl	80059f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	f107 0314 	add.w	r3, r7, #20
 80001b4:	2200      	movs	r2, #0
 80001b6:	601a      	str	r2, [r3, #0]
 80001b8:	605a      	str	r2, [r3, #4]
 80001ba:	609a      	str	r2, [r3, #8]
 80001bc:	60da      	str	r2, [r3, #12]
 80001be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80001cc:	230a      	movs	r3, #10
 80001ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d0:	2301      	movs	r3, #1
 80001d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d4:	2310      	movs	r3, #16
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001dc:	2300      	movs	r3, #0
 80001de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 fb89 	bl	80018fc <HAL_RCC_OscConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f0:	f000 f974 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f4:	230f      	movs	r3, #15
 80001f6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fdf6 	bl	8001e00 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800021a:	f000 f95f 	bl	80004dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800021e:	2302      	movs	r3, #2
 8000220:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f001 ffb1 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000234:	f000 f952 	bl	80004dc <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3750      	adds	r7, #80	; 0x50
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000252:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <MX_ADC1_Init+0x78>)
 8000254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000256:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_ADC1_Init+0x74>)
 800025e:	2200      	movs	r2, #0
 8000260:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000264:	2200      	movs	r2, #0
 8000266:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_ADC1_Init+0x74>)
 800026a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800026e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_ADC1_Init+0x74>)
 8000278:	2201      	movs	r2, #1
 800027a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <MX_ADC1_Init+0x74>)
 800027e:	f000 fb9b 	bl	80009b8 <HAL_ADC_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000288:	f000 f928 	bl	80004dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4619      	mov	r1, r3
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <MX_ADC1_Init+0x74>)
 800029e:	f000 fd39 	bl	8000d14 <HAL_ADC_ConfigChannel>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a8:	f000 f918 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000090 	.word	0x20000090
 80002b8:	40012400 	.word	0x40012400

080002bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <MX_I2C1_Init+0x50>)
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_I2C1_Init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_I2C1_Init+0x50>)
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <MX_I2C1_Init+0x58>)
 80002ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_I2C1_Init+0x50>)
 80002da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f8:	4804      	ldr	r0, [pc, #16]	; (800030c <MX_I2C1_Init+0x50>)
 80002fa:	f001 f979 	bl	80015f0 <HAL_I2C_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f8ea 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000c0 	.word	0x200000c0
 8000310:	40005400 	.word	0x40005400
 8000314:	000186a0 	.word	0x000186a0

08000318 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_IWDG_Init+0x2c>)
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <MX_IWDG_Init+0x30>)
 8000320:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_IWDG_Init+0x2c>)
 8000324:	2204      	movs	r2, #4
 8000326:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_IWDG_Init+0x2c>)
 800032a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800032e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_IWDG_Init+0x2c>)
 8000332:	f001 faa1 	bl	8001878 <HAL_IWDG_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800033c:	f000 f8ce 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000114 	.word	0x20000114
 8000348:	40003000 	.word	0x40003000

0800034c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <MX_USART1_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000384:	f002 fa04 	bl	8002790 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f8a5 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000120 	.word	0x20000120
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART2_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART2_UART_Init+0x4c>)
 80003d8:	f002 f9da 	bl	8002790 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f87b 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000164 	.word	0x20000164
 80003f0:	40004400 	.word	0x40004400

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <MX_GPIO_Init+0xa8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a23      	ldr	r2, [pc, #140]	; (800049c <MX_GPIO_Init+0xa8>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b21      	ldr	r3, [pc, #132]	; (800049c <MX_GPIO_Init+0xa8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <MX_GPIO_Init+0xa8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <MX_GPIO_Init+0xa8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <MX_GPIO_Init+0xa8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a17      	ldr	r2, [pc, #92]	; (800049c <MX_GPIO_Init+0xa8>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b15      	ldr	r3, [pc, #84]	; (800049c <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_Pin|RELAY_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 8000456:	4812      	ldr	r0, [pc, #72]	; (80004a0 <MX_GPIO_Init+0xac>)
 8000458:	f001 f8b2 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 800045c:	2310      	movs	r3, #16
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480d      	ldr	r0, [pc, #52]	; (80004a4 <MX_GPIO_Init+0xb0>)
 8000470:	f000 ff22 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_Pin RELAY_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = FAN_Pin|RELAY_Pin|LED2_Pin|LED1_Pin;
 8000474:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_GPIO_Init+0xac>)
 800048e:	f000 ff13 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	3720      	adds	r7, #32
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	40010800 	.word	0x40010800

080004a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f002 fe79 	bl	80031a8 <osDelay>
 80004b6:	e7fb      	b.n	80004b0 <StartDefaultTask+0x8>

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ca:	f000 fa59 	bl	8000980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40000800 	.word	0x40000800

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_MspInit+0x68>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_MspInit+0x68>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_MspInit+0x68>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_MspInit+0x68>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_MspInit+0x68>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x68>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	210f      	movs	r1, #15
 8000522:	f06f 0001 	mvn.w	r0, #1
 8000526:	f000 fdec 	bl	8001102 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_MspInit+0x6c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x6c>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <HAL_ADC_MspInit+0x7c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d129      	bne.n	80005cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a16      	ldr	r2, [pc, #88]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_ADC_MspInit+0x80>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VOL_Pin;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VOL_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <HAL_ADC_MspInit+0x84>)
 80005b8:	f000 fe7e 	bl	80012b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80005bc:	2200      	movs	r2, #0
 80005be:	2105      	movs	r1, #5
 80005c0:	2012      	movs	r0, #18
 80005c2:	f000 fd9e 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005c6:	2012      	movs	r0, #18
 80005c8:	f000 fdb7 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40012400 	.word	0x40012400
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40010800 	.word	0x40010800

080005e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a15      	ldr	r2, [pc, #84]	; (8000650 <HAL_I2C_MspInit+0x70>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d123      	bne.n	8000648 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <HAL_I2C_MspInit+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <HAL_I2C_MspInit+0x74>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <HAL_I2C_MspInit+0x74>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000618:	23c0      	movs	r3, #192	; 0xc0
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061c:	2312      	movs	r3, #18
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <HAL_I2C_MspInit+0x78>)
 800062c:	f000 fe44 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_I2C_MspInit+0x74>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_I2C_MspInit+0x74>)
 8000636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800063a:	61d3      	str	r3, [r2, #28]
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_I2C_MspInit+0x74>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40005400 	.word	0x40005400
 8000654:	40021000 	.word	0x40021000
 8000658:	40010c00 	.word	0x40010c00

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a3f      	ldr	r2, [pc, #252]	; (8000774 <HAL_UART_MspInit+0x118>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d13a      	bne.n	80006f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <HAL_UART_MspInit+0x11c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a3d      	ldr	r2, [pc, #244]	; (8000778 <HAL_UART_MspInit+0x11c>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <HAL_UART_MspInit+0x11c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <HAL_UART_MspInit+0x11c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a37      	ldr	r2, [pc, #220]	; (8000778 <HAL_UART_MspInit+0x11c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <HAL_UART_MspInit+0x11c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4619      	mov	r1, r3
 80006c0:	482e      	ldr	r0, [pc, #184]	; (800077c <HAL_UART_MspInit+0x120>)
 80006c2:	f000 fdf9 	bl	80012b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	4619      	mov	r1, r3
 80006da:	4828      	ldr	r0, [pc, #160]	; (800077c <HAL_UART_MspInit+0x120>)
 80006dc:	f000 fdec 	bl	80012b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2105      	movs	r1, #5
 80006e4:	2025      	movs	r0, #37	; 0x25
 80006e6:	f000 fd0c 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f000 fd25 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f0:	e03c      	b.n	800076c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <HAL_UART_MspInit+0x124>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d137      	bne.n	800076c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <HAL_UART_MspInit+0x11c>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a1d      	ldr	r2, [pc, #116]	; (8000778 <HAL_UART_MspInit+0x11c>)
 8000702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_UART_MspInit+0x11c>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <HAL_UART_MspInit+0x11c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a17      	ldr	r2, [pc, #92]	; (8000778 <HAL_UART_MspInit+0x11c>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_UART_MspInit+0x11c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800072c:	2304      	movs	r3, #4
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	4619      	mov	r1, r3
 800073e:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_UART_MspInit+0x120>)
 8000740:	f000 fdba 	bl	80012b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000744:	2308      	movs	r3, #8
 8000746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_UART_MspInit+0x120>)
 8000758:	f000 fdae 	bl	80012b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	2026      	movs	r0, #38	; 0x26
 8000762:	f000 fcce 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000766:	2026      	movs	r0, #38	; 0x26
 8000768:	f000 fce7 	bl	800113a <HAL_NVIC_EnableIRQ>
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800
 8000780:	40004400 	.word	0x40004400

08000784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000794:	2300      	movs	r3, #0
 8000796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <HAL_InitTick+0xe8>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a33      	ldr	r2, [pc, #204]	; (800086c <HAL_InitTick+0xe8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <HAL_InitTick+0xe8>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b2:	f107 0210 	add.w	r2, r7, #16
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fc99 	bl	80020f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d103      	bne.n	80007d4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007cc:	f001 fc6a 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80007d0:	6378      	str	r0, [r7, #52]	; 0x34
 80007d2:	e004      	b.n	80007de <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007d4:	f001 fc66 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80007d8:	4603      	mov	r3, r0
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e0:	4a23      	ldr	r2, [pc, #140]	; (8000870 <HAL_InitTick+0xec>)
 80007e2:	fba2 2303 	umull	r2, r3, r2, r3
 80007e6:	0c9b      	lsrs	r3, r3, #18
 80007e8:	3b01      	subs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <HAL_InitTick+0xf0>)
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <HAL_InitTick+0xf4>)
 80007f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_InitTick+0xf0>)
 80007f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007fa:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <HAL_InitTick+0xf0>)
 80007fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_InitTick+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <HAL_InitTick+0xf0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <HAL_InitTick+0xf0>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000812:	4818      	ldr	r0, [pc, #96]	; (8000874 <HAL_InitTick+0xf0>)
 8000814:	f001 fd72 	bl	80022fc <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800081e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11b      	bne.n	800085e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000826:	4813      	ldr	r0, [pc, #76]	; (8000874 <HAL_InitTick+0xf0>)
 8000828:	f001 fdc0 	bl	80023ac <HAL_TIM_Base_Start_IT>
 800082c:	4603      	mov	r3, r0
 800082e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000836:	2b00      	cmp	r3, #0
 8000838:	d111      	bne.n	800085e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800083a:	201e      	movs	r0, #30
 800083c:	f000 fc7d 	bl	800113a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b0f      	cmp	r3, #15
 8000844:	d808      	bhi.n	8000858 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000846:	2200      	movs	r2, #0
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	201e      	movs	r0, #30
 800084c:	f000 fc59 	bl	8001102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_InitTick+0xf8>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	e002      	b.n	800085e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800085e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000862:	4618      	mov	r0, r3
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	431bde83 	.word	0x431bde83
 8000874:	200001ac 	.word	0x200001ac
 8000878:	40000800 	.word	0x40000800
 800087c:	20000004 	.word	0x20000004

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <ADC1_2_IRQHandler+0x10>)
 80008b2:	f000 f959 	bl	8000b68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000090 	.word	0x20000090

080008c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM4_IRQHandler+0x10>)
 80008c6:	f001 fdc3 	bl	8002450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001ac 	.word	0x200001ac

080008d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <USART1_IRQHandler+0x10>)
 80008da:	f001 ffa7 	bl	800282c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000120 	.word	0x20000120

080008e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <USART2_IRQHandler+0x10>)
 80008ee:	f001 ff9d 	bl	800282c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000164 	.word	0x20000164

080008fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092e:	f7ff ffe5 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000932:	f005 f82b 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fc0b 	bl	8000150 <main>
  bx lr
 800093a:	4770      	bx	lr
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000944:	08005c70 	.word	0x08005c70
  ldr r2, =_sbss
 8000948:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800094c:	20001c08 	.word	0x20001c08

08000950 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <CAN1_RX1_IRQHandler>
	...

08000954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_Init+0x28>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_Init+0x28>)
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 fbc1 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096a:	200f      	movs	r0, #15
 800096c:	f7ff ff0a 	bl	8000784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000970:	f7ff fdba 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x20>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000008 	.word	0x20000008
 80009a0:	200001f4 	.word	0x200001f4

080009a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	200001f4 	.word	0x200001f4

080009b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e0be      	b.n	8000b58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fdae 	bl	8000558 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 fa81 	bl	8000f04 <ADC_ConversionStop_Disable>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8099 	bne.w	8000b46 <HAL_ADC_Init+0x18e>
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8095 	bne.w	8000b46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a24:	f023 0302 	bic.w	r3, r3, #2
 8000a28:	f043 0202 	orr.w	r2, r3, #2
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7b1b      	ldrb	r3, [r3, #12]
 8000a3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a50:	d003      	beq.n	8000a5a <HAL_ADC_Init+0xa2>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d102      	bne.n	8000a60 <HAL_ADC_Init+0xa8>
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	e000      	b.n	8000a62 <HAL_ADC_Init+0xaa>
 8000a60:	2300      	movs	r3, #0
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7d1b      	ldrb	r3, [r3, #20]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d119      	bne.n	8000aa4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7b1b      	ldrb	r3, [r3, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d109      	bne.n	8000a8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	035a      	lsls	r2, r3, #13
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	e00b      	b.n	8000aa4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	f043 0220 	orr.w	r2, r3, #32
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	f043 0201 	orr.w	r2, r3, #1
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <HAL_ADC_Init+0x1a8>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad4:	d003      	beq.n	8000ade <HAL_ADC_Init+0x126>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d104      	bne.n	8000ae8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	051b      	lsls	r3, r3, #20
 8000ae6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_ADC_Init+0x1ac>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d10b      	bne.n	8000b24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f023 0303 	bic.w	r3, r3, #3
 8000b1a:	f043 0201 	orr.w	r2, r3, #1
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b22:	e018      	b.n	8000b56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	f023 0312 	bic.w	r3, r3, #18
 8000b2c:	f043 0210 	orr.w	r2, r3, #16
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b44:	e007      	b.n	8000b56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f043 0210 	orr.w	r2, r3, #16
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	ffe1f7fd 	.word	0xffe1f7fd
 8000b64:	ff1f0efe 	.word	0xff1f0efe

08000b68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d140      	bne.n	8000c00 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d139      	bne.n	8000c00 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bb2:	d11d      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d119      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0220 	bic.w	r2, r2, #32
 8000bca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be8:	f043 0201 	orr.w	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f87c 	bl	8000cee <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f06f 0212 	mvn.w	r2, #18
 8000bfe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	2b80      	cmp	r3, #128	; 0x80
 8000c0c:	d14f      	bne.n	8000cae <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d148      	bne.n	8000cae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000c3e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000c42:	d012      	beq.n	8000c6a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d125      	bne.n	8000c9e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c5c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c60:	d11d      	bne.n	8000c9e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d119      	bne.n	8000c9e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c78:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d105      	bne.n	8000c9e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f971 	bl	8000f86 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f06f 020c 	mvn.w	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb8:	2b40      	cmp	r3, #64	; 0x40
 8000cba:	d114      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10d      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f812 	bl	8000d00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f06f 0201 	mvn.w	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
	...

08000d14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x20>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e0dc      	b.n	8000eee <HAL_ADC_ConfigChannel+0x1da>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d81c      	bhi.n	8000d7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	3b05      	subs	r3, #5
 8000d56:	221f      	movs	r2, #31
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4019      	ands	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b05      	subs	r3, #5
 8000d70:	fa00 f203 	lsl.w	r2, r0, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7c:	e03c      	b.n	8000df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b0c      	cmp	r3, #12
 8000d84:	d81c      	bhi.n	8000dc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	3b23      	subs	r3, #35	; 0x23
 8000d98:	221f      	movs	r2, #31
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4019      	ands	r1, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b23      	subs	r3, #35	; 0x23
 8000db2:	fa00 f203 	lsl.w	r2, r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000dbe:	e01b      	b.n	8000df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	3b41      	subs	r3, #65	; 0x41
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4019      	ands	r1, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	3b41      	subs	r3, #65	; 0x41
 8000dec:	fa00 f203 	lsl.w	r2, r0, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b09      	cmp	r3, #9
 8000dfe:	d91c      	bls.n	8000e3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68d9      	ldr	r1, [r3, #12]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b1e      	subs	r3, #30
 8000e12:	2207      	movs	r2, #7
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4019      	ands	r1, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6898      	ldr	r0, [r3, #8]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	3b1e      	subs	r3, #30
 8000e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	e019      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6919      	ldr	r1, [r3, #16]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4019      	ands	r1, r3
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	6898      	ldr	r0, [r3, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	fa00 f203 	lsl.w	r2, r0, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	d003      	beq.n	8000e7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e7a:	2b11      	cmp	r3, #17
 8000e7c:	d132      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d125      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d126      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ea4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d11a      	bne.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_ADC_ConfigChannel+0x1e8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_ADC_ConfigChannel+0x1ec>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9a      	lsrs	r2, r3, #18
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec4:	e002      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f9      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x1b2>
 8000ed2:	e007      	b.n	8000ee4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f043 0220 	orr.w	r2, r3, #32
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40012400 	.word	0x40012400
 8000efc:	20000000 	.word	0x20000000
 8000f00:	431bde83 	.word	0x431bde83

08000f04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d12e      	bne.n	8000f7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f2e:	f7ff fd39 	bl	80009a4 <HAL_GetTick>
 8000f32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f34:	e01b      	b.n	8000f6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f36:	f7ff fd35 	bl	80009a4 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d914      	bls.n	8000f6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d10d      	bne.n	8000f6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f043 0210 	orr.w	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e007      	b.n	8000f7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d0dc      	beq.n	8000f36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4906      	ldr	r1, [pc, #24]	; (8001030 <__NVIC_EnableIRQ+0x34>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff4f 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff64 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ffb2 	bl	8001088 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff81 	bl	8001034 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff57 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001168:	2b02      	cmp	r3, #2
 800116a:	d008      	beq.n	800117e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2204      	movs	r2, #4
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e020      	b.n	80011c0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 020e 	bic.w	r2, r2, #14
 800118c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a6:	2101      	movs	r1, #1
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d005      	beq.n	80011ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e051      	b.n	8001292 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020e 	bic.w	r2, r2, #14
 80011fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_DMA_Abort_IT+0xd0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d029      	beq.n	800126c <HAL_DMA_Abort_IT+0xa0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_DMA_Abort_IT+0xd4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d022      	beq.n	8001268 <HAL_DMA_Abort_IT+0x9c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <HAL_DMA_Abort_IT+0xd8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d01a      	beq.n	8001262 <HAL_DMA_Abort_IT+0x96>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_DMA_Abort_IT+0xdc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d012      	beq.n	800125c <HAL_DMA_Abort_IT+0x90>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <HAL_DMA_Abort_IT+0xe0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00a      	beq.n	8001256 <HAL_DMA_Abort_IT+0x8a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_DMA_Abort_IT+0xe4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d102      	bne.n	8001250 <HAL_DMA_Abort_IT+0x84>
 800124a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800124e:	e00e      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 8001250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001254:	e00b      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	e008      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	e005      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 8001262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001266:	e002      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 8001268:	2310      	movs	r3, #16
 800126a:	e000      	b.n	800126e <HAL_DMA_Abort_IT+0xa2>
 800126c:	2301      	movs	r3, #1
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_DMA_Abort_IT+0xe8>)
 8001270:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4798      	blx	r3
    } 
  }
  return status;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40020008 	.word	0x40020008
 80012a0:	4002001c 	.word	0x4002001c
 80012a4:	40020030 	.word	0x40020030
 80012a8:	40020044 	.word	0x40020044
 80012ac:	40020058 	.word	0x40020058
 80012b0:	4002006c 	.word	0x4002006c
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e169      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012cc:	2201      	movs	r2, #1
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8158 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a9a      	ldr	r2, [pc, #616]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d05e      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 80012f4:	4a98      	ldr	r2, [pc, #608]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d875      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 80012fa:	4a98      	ldr	r2, [pc, #608]	; (800155c <HAL_GPIO_Init+0x2a4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d058      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001300:	4a96      	ldr	r2, [pc, #600]	; (800155c <HAL_GPIO_Init+0x2a4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d86f      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001306:	4a96      	ldr	r2, [pc, #600]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d052      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 800130c:	4a94      	ldr	r2, [pc, #592]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d869      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001312:	4a94      	ldr	r2, [pc, #592]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d04c      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001318:	4a92      	ldr	r2, [pc, #584]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d863      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800131e:	4a92      	ldr	r2, [pc, #584]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d046      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001324:	4a90      	ldr	r2, [pc, #576]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d85d      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800132a:	2b12      	cmp	r3, #18
 800132c:	d82a      	bhi.n	8001384 <HAL_GPIO_Init+0xcc>
 800132e:	2b12      	cmp	r3, #18
 8001330:	d859      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <HAL_GPIO_Init+0x80>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	080013b3 	.word	0x080013b3
 800133c:	0800138d 	.word	0x0800138d
 8001340:	0800139f 	.word	0x0800139f
 8001344:	080013e1 	.word	0x080013e1
 8001348:	080013e7 	.word	0x080013e7
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	080013e7 	.word	0x080013e7
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013e7 	.word	0x080013e7
 8001378:	080013e7 	.word	0x080013e7
 800137c:	08001395 	.word	0x08001395
 8001380:	080013a9 	.word	0x080013a9
 8001384:	4a79      	ldr	r2, [pc, #484]	; (800156c <HAL_GPIO_Init+0x2b4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800138a:	e02c      	b.n	80013e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e029      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3304      	adds	r3, #4
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e024      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e01f      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	330c      	adds	r3, #12
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e01a      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2304      	movs	r3, #4
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e013      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	611a      	str	r2, [r3, #16]
          break;
 80013d2:	e009      	b.n	80013e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	615a      	str	r2, [r3, #20]
          break;
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          break;
 80013e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	; 0xff
 80013ec:	d801      	bhi.n	80013f2 <HAL_GPIO_Init+0x13a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_Init+0x13e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d802      	bhi.n	8001404 <HAL_GPIO_Init+0x14c>
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x152>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3b08      	subs	r3, #8
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	210f      	movs	r1, #15
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	6a39      	ldr	r1, [r7, #32]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80b1 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001438:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a4c      	ldr	r2, [pc, #304]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2bc>)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a40      	ldr	r2, [pc, #256]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_GPIO_Init+0x1ec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3f      	ldr	r2, [pc, #252]	; (800157c <HAL_GPIO_Init+0x2c4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <HAL_GPIO_Init+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1e4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3d      	ldr	r2, [pc, #244]	; (8001584 <HAL_GPIO_Init+0x2cc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1e0>
 8001494:	2303      	movs	r3, #3
 8001496:	e006      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 8001498:	2304      	movs	r3, #4
 800149a:	e004      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 800149c:	2302      	movs	r3, #2
 800149e:	e002      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_GPIO_Init+0x1ee>
 80014a4:	2300      	movs	r3, #0
 80014a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a8:	f002 0203 	and.w	r2, r2, #3
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	4093      	lsls	r3, r2
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b6:	492f      	ldr	r1, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x2bc>)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	492c      	ldr	r1, [pc, #176]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4928      	ldr	r1, [pc, #160]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4922      	ldr	r1, [pc, #136]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	43db      	mvns	r3, r3
 800150e:	491e      	ldr	r1, [pc, #120]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001510:	4013      	ands	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	4918      	ldr	r1, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	608b      	str	r3, [r1, #8]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	4914      	ldr	r1, [pc, #80]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d021      	beq.n	800158c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	490e      	ldr	r1, [pc, #56]	; (8001588 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
 8001554:	e021      	b.n	800159a <HAL_GPIO_Init+0x2e2>
 8001556:	bf00      	nop
 8001558:	10320000 	.word	0x10320000
 800155c:	10310000 	.word	0x10310000
 8001560:	10220000 	.word	0x10220000
 8001564:	10210000 	.word	0x10210000
 8001568:	10120000 	.word	0x10120000
 800156c:	10110000 	.word	0x10110000
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40011000 	.word	0x40011000
 8001584:	40011400 	.word	0x40011400
 8001588:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_GPIO_Init+0x304>)
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	43db      	mvns	r3, r3
 8001594:	4909      	ldr	r1, [pc, #36]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001596:	4013      	ands	r3, r2
 8001598:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae8e 	bne.w	80012cc <HAL_GPIO_Init+0x14>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	372c      	adds	r7, #44	; 0x2c
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e12b      	b.n	800185a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d106      	bne.n	800161c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe ffe2 	bl	80005e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001654:	f000 fd26 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a81      	ldr	r2, [pc, #516]	; (8001864 <HAL_I2C_Init+0x274>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d807      	bhi.n	8001674 <HAL_I2C_Init+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_I2C_Init+0x278>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x92>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a7d      	ldr	r2, [pc, #500]	; (800186c <HAL_I2C_Init+0x27c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0e7      	b.n	800185a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4a78      	ldr	r2, [pc, #480]	; (8001870 <HAL_I2C_Init+0x280>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_I2C_Init+0x274>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d802      	bhi.n	80016c4 <HAL_I2C_Init+0xd4>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	e009      	b.n	80016d8 <HAL_I2C_Init+0xe8>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_I2C_Init+0x284>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	3301      	adds	r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	495c      	ldr	r1, [pc, #368]	; (8001864 <HAL_I2C_Init+0x274>)
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d819      	bhi.n	800172c <HAL_I2C_Init+0x13c>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fbb1 f3f3 	udiv	r3, r1, r3
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800170c:	400b      	ands	r3, r1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_Init+0x138>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1e59      	subs	r1, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001720:	3301      	adds	r3, #1
 8001722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001726:	e051      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001728:	2304      	movs	r3, #4
 800172a:	e04f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_I2C_Init+0x168>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1e58      	subs	r0, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6859      	ldr	r1, [r3, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	440b      	add	r3, r1
 8001742:	fbb0 f3f3 	udiv	r3, r0, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	e012      	b.n	800177e <HAL_I2C_Init+0x18e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x196>
 8001782:	2301      	movs	r3, #1
 8001784:	e022      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10e      	bne.n	80017ac <HAL_I2C_Init+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e58      	subs	r0, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6859      	ldr	r1, [r3, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	440b      	add	r3, r1
 800179c:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Init+0x1dc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6809      	ldr	r1, [r1, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6911      	ldr	r1, [r2, #16]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	000186a0 	.word	0x000186a0
 8001868:	001e847f 	.word	0x001e847f
 800186c:	003d08ff 	.word	0x003d08ff
 8001870:	431bde83 	.word	0x431bde83
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e034      	b.n	80018f4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001892:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f245 5255 	movw	r2, #21845	; 0x5555
 800189c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6852      	ldr	r2, [r2, #4]
 80018a6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6892      	ldr	r2, [r2, #8]
 80018b0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80018b2:	f7ff f877 	bl	80009a4 <HAL_GetTick>
 80018b6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018b8:	e00f      	b.n	80018da <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80018ba:	f7ff f873 	bl	80009a4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b27      	cmp	r3, #39	; 0x27
 80018c6:	d908      	bls.n	80018da <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e00c      	b.n	80018f4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e8      	bne.n	80018ba <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80018f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e272      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8087 	beq.w	8001a2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800191c:	4b92      	ldr	r3, [pc, #584]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b04      	cmp	r3, #4
 8001926:	d00c      	beq.n	8001942 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001928:	4b8f      	ldr	r3, [pc, #572]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d112      	bne.n	800195a <HAL_RCC_OscConfig+0x5e>
 8001934:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001940:	d10b      	bne.n	800195a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d06c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x12c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d168      	bne.n	8001a28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e24c      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001962:	d106      	bne.n	8001972 <HAL_RCC_OscConfig+0x76>
 8001964:	4b80      	ldr	r3, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a7f      	ldr	r2, [pc, #508]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e02e      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x98>
 800197a:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a77      	ldr	r2, [pc, #476]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0xbc>
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a71      	ldr	r2, [pc, #452]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6e      	ldr	r2, [pc, #440]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xd4>
 80019b8:	4b6b      	ldr	r3, [pc, #428]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a6a      	ldr	r2, [pc, #424]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a67      	ldr	r2, [pc, #412]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7fe ffe4 	bl	80009a4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7fe ffe0 	bl	80009a4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e200      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe4>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7fe ffd0 	bl	80009a4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7fe ffcc 	bl	80009a4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1ec      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x10c>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d063      	beq.n	8001afe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00b      	beq.n	8001a5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a42:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d11c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x18c>
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d116      	bne.n	8001a88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x176>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e1c0      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4939      	ldr	r1, [pc, #228]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	e03a      	b.n	8001afe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_RCC_OscConfig+0x270>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe ff85 	bl	80009a4 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7fe ff81 	bl	80009a4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1a1      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4927      	ldr	r1, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_RCC_OscConfig+0x270>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe ff64 	bl	80009a4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae0:	f7fe ff60 	bl	80009a4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e180      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d03a      	beq.n	8001b80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d019      	beq.n	8001b46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_RCC_OscConfig+0x274>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7fe ff44 	bl	80009a4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7fe ff40 	bl	80009a4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e160      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 fb08 	bl	8002154 <RCC_Delay>
 8001b44:	e01c      	b.n	8001b80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_RCC_OscConfig+0x274>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7fe ff2a 	bl	80009a4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b52:	e00f      	b.n	8001b74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7fe ff26 	bl	80009a4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d908      	bls.n	8001b74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e146      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	42420000 	.word	0x42420000
 8001b70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b74:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1e9      	bne.n	8001b54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80a6 	beq.w	8001cda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a87      	ldr	r2, [pc, #540]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_OscConfig+0x4c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc6:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7e      	ldr	r2, [pc, #504]	; (8001dc4 <HAL_RCC_OscConfig+0x4c8>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fee7 	bl	80009a4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7fe fee3 	bl	80009a4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e103      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x4c8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x312>
 8001c00:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e02d      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x334>
 8001c16:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	e01c      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_OscConfig+0x356>
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a60      	ldr	r2, [pc, #384]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6213      	str	r3, [r2, #32]
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a5d      	ldr	r2, [pc, #372]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	e00b      	b.n	8001c6a <HAL_RCC_OscConfig+0x36e>
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6213      	str	r3, [r2, #32]
 8001c5e:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d015      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7fe fe97 	bl	80009a4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe fe93 	bl	80009a4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0b1      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c90:	4b4b      	ldr	r3, [pc, #300]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ee      	beq.n	8001c7a <HAL_RCC_OscConfig+0x37e>
 8001c9c:	e014      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fe81 	bl	80009a4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fe7d 	bl	80009a4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e09b      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d105      	bne.n	8001cda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8087 	beq.w	8001df2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d061      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d146      	bne.n	8001d86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x4cc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fe51 	bl	80009a4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe fe4d 	bl	80009a4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e06d      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d108      	bne.n	8001d40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a19      	ldr	r1, [r3, #32]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	430b      	orrs	r3, r1
 8001d52:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4cc>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fe21 	bl	80009a4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fe1d 	bl	80009a4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e03d      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x46a>
 8001d84:	e035      	b.n	8001df2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe0a 	bl	80009a4 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe fe06 	bl	80009a4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e026      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x498>
 8001db2:	e01e      	b.n	8001df2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e019      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_OscConfig+0x500>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d0      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d910      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4965      	ldr	r1, [pc, #404]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b8      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d040      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e073      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06b      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7fe fd58 	bl	80009a4 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7fe fd54 	bl	80009a4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e053      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d210      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4922      	ldr	r1, [pc, #136]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f821 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1cc>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fbe8 	bl	8000784 <HAL_InitTick>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	08005bf0 	.word	0x08005bf0
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b490      	push	{r4, r7}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fdc:	1d3c      	adds	r4, r7, #4
 8001fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe4:	f240 2301 	movw	r3, #513	; 0x201
 8001fe8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x40>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x46>
 8002012:	e02b      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e02b      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3328      	adds	r3, #40	; 0x28
 8002024:	443b      	add	r3, r7
 8002026:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800202a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0c5b      	lsrs	r3, r3, #17
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	3328      	adds	r3, #40	; 0x28
 8002042:	443b      	add	r3, r7
 8002044:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002048:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e004      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4a0b      	ldr	r2, [pc, #44]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	623b      	str	r3, [r7, #32]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	6a3b      	ldr	r3, [r7, #32]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc90      	pop	{r4, r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	08005ba4 	.word	0x08005ba4
 8002084:	40021000 	.word	0x40021000
 8002088:	007a1200 	.word	0x007a1200
 800208c:	003d0900 	.word	0x003d0900

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a8:	f7ff fff2 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08005c00 	.word	0x08005c00

080020cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d0:	f7ff ffde 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0adb      	lsrs	r3, r3, #11
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4903      	ldr	r1, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08005c00 	.word	0x08005c00

080020f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	220f      	movs	r2, #15
 8002102:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_GetClockConfig+0x58>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0203 	and.w	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_RCC_GetClockConfig+0x58>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_GetClockConfig+0x58>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_GetClockConfig+0x58>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetClockConfig+0x5c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0207 	and.w	r2, r3, #7
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40021000 	.word	0x40021000
 8002150:	40022000 	.word	0x40022000

08002154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <RCC_Delay+0x34>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <RCC_Delay+0x38>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0a5b      	lsrs	r3, r3, #9
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002170:	bf00      	nop
  }
  while (Delay --);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <RCC_Delay+0x1c>
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07d      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b0:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b49      	ldr	r3, [pc, #292]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d118      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e4:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a42      	ldr	r2, [pc, #264]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fbd8 	bl	80009a4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	e008      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fbd4 	bl	80009a4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e06d      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d02e      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d027      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d014      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fba3 	bl	80009a4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fb9f 	bl	80009a4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e036      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4917      	ldr	r1, [pc, #92]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	4313      	orrs	r3, r2
 8002294:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	490b      	ldr	r1, [pc, #44]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420440 	.word	0x42420440

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e041      	b.n	8002392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f839 	bl	800239a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 f9b4 	bl	80026a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e03a      	b.n	800243a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_TIM_Base_Start_IT+0x98>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d009      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_TIM_Base_Start_IT+0x9c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_TIM_Base_Start_IT+0xa0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d111      	bne.n	8002428 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d010      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002426:	e007      	b.n	8002438 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800

08002450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b02      	cmp	r3, #2
 8002464:	d122      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d11b      	bne.n	80024ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0202 	mvn.w	r2, #2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8ed 	bl	8002672 <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8e0 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8ef 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d122      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d11b      	bne.n	8002500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0204 	mvn.w	r2, #4
 80024d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8c3 	bl	8002672 <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f8b6 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f8c5 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b08      	cmp	r3, #8
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0208 	mvn.w	r2, #8
 8002524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2204      	movs	r2, #4
 800252a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f899 	bl	8002672 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f88c 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f89b 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b10      	cmp	r3, #16
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0210 	mvn.w	r2, #16
 8002578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2208      	movs	r2, #8
 800257e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f86f 	bl	8002672 <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f862 	bl	8002660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f871 	bl	8002684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0201 	mvn.w	r2, #1
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fd ff72 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8bf 	bl	800277e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f835 	bl	8002696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b20      	cmp	r3, #32
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0220 	mvn.w	r2, #32
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f88a 	bl	800276c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a29      	ldr	r2, [pc, #164]	; (8002760 <TIM_Base_SetConfig+0xb8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a26      	ldr	r2, [pc, #152]	; (8002764 <TIM_Base_SetConfig+0xbc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x30>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <TIM_Base_SetConfig+0xc0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <TIM_Base_SetConfig+0xb8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a19      	ldr	r2, [pc, #100]	; (8002764 <TIM_Base_SetConfig+0xbc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x62>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <TIM_Base_SetConfig+0xc0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <TIM_Base_SetConfig+0xb8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400
 8002768:	40000800 	.word	0x40000800

0800276c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e03f      	b.n	8002822 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fd ff50 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb49 	bl	8002e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_UART_IRQHandler+0x52>
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fa4f 	bl	8002d1a <UART_Receive_IT>
      return;
 800287c:	e17b      	b.n	8002b76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80b1 	beq.w	80029e8 <HAL_UART_IRQHandler+0x1bc>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_UART_IRQHandler+0x70>
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80a6 	beq.w	80029e8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_UART_IRQHandler+0x90>
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_UART_IRQHandler+0xb0>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_UART_IRQHandler+0xd0>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00f      	beq.n	8002926 <HAL_UART_IRQHandler+0xfa>
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <HAL_UART_IRQHandler+0xee>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0208 	orr.w	r2, r3, #8
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 811e 	beq.w	8002b6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_UART_IRQHandler+0x11e>
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f9e8 	bl	8002d1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_UART_IRQHandler+0x146>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d031      	beq.n	80029d6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f92a 	bl	8002bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d023      	beq.n	80029ce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002994:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	2b00      	cmp	r3, #0
 800299c:	d013      	beq.n	80029c6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	4a76      	ldr	r2, [pc, #472]	; (8002b7c <HAL_UART_IRQHandler+0x350>)
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fc0e 	bl	80011cc <HAL_DMA_Abort_IT>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029c0:	4610      	mov	r0, r2
 80029c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c4:	e00e      	b.n	80029e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8ec 	bl	8002ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	e00a      	b.n	80029e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8e8 	bl	8002ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	e006      	b.n	80029e4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8e4 	bl	8002ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029e2:	e0c3      	b.n	8002b6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	bf00      	nop
    return;
 80029e6:	e0c1      	b.n	8002b6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 80a1 	bne.w	8002b34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 809b 	beq.w	8002b34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8095 	beq.w	8002b34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d04e      	beq.n	8002acc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a38:	8a3b      	ldrh	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8098 	beq.w	8002b70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a44:	8a3a      	ldrh	r2, [r7, #16]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f080 8092 	bcs.w	8002b70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8a3a      	ldrh	r2, [r7, #16]
 8002a50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d02b      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0210 	bic.w	r2, r2, #16
 8002aa8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fb51 	bl	8001156 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f876 	bl	8002bb6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002aca:	e051      	b.n	8002b70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d047      	beq.n	8002b74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ae4:	8a7b      	ldrh	r3, [r7, #18]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002af8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0210 	bic.w	r2, r2, #16
 8002b26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b28:	8a7b      	ldrh	r3, [r7, #18]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f842 	bl	8002bb6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b32:	e01f      	b.n	8002b74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_UART_IRQHandler+0x324>
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f87f 	bl	8002c4c <UART_Transmit_IT>
    return;
 8002b4e:	e012      	b.n	8002b76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_UART_IRQHandler+0x34a>
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f8c0 	bl	8002cea <UART_EndTransmit_IT>
    return;
 8002b6a:	e004      	b.n	8002b76 <HAL_UART_IRQHandler+0x34a>
    return;
 8002b6c:	bf00      	nop
 8002b6e:	e002      	b.n	8002b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b70:	bf00      	nop
 8002b72:	e000      	b.n	8002b76 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b74:	bf00      	nop
  }
}
 8002b76:	3728      	adds	r7, #40	; 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08002c25 	.word	0x08002c25

08002b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002be2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0210 	bic.w	r2, r2, #16
 8002c0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff ffb0 	bl	8002ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b21      	cmp	r3, #33	; 0x21
 8002c5e:	d13e      	bne.n	8002cde <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d114      	bne.n	8002c94 <UART_Transmit_IT+0x48>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d110      	bne.n	8002c94 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]
 8002c92:	e008      	b.n	8002ca6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	1c59      	adds	r1, r3, #1
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6211      	str	r1, [r2, #32]
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff38 	bl	8002b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b22      	cmp	r3, #34	; 0x22
 8002d2c:	f040 8099 	bne.w	8002e62 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d117      	bne.n	8002d6a <UART_Receive_IT+0x50>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d113      	bne.n	8002d6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
 8002d68:	e026      	b.n	8002db8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	d007      	beq.n	8002d8e <UART_Receive_IT+0x74>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <UART_Receive_IT+0x82>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e008      	b.n	8002dae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d148      	bne.n	8002e5e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0220 	bic.w	r2, r2, #32
 8002dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d123      	bne.n	8002e54 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0210 	bic.w	r2, r2, #16
 8002e20:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d10a      	bne.n	8002e46 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff feb2 	bl	8002bb6 <HAL_UARTEx_RxEventCallback>
 8002e52:	e002      	b.n	8002e5a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fe9c 	bl	8002b92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e002      	b.n	8002e64 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e000      	b.n	8002e64 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ea6:	f023 030c 	bic.w	r3, r3, #12
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <UART_SetConfig+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d103      	bne.n	8002edc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ed4:	f7ff f8fa 	bl	80020cc <HAL_RCC_GetPCLK2Freq>
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	e002      	b.n	8002ee2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002edc:	f7ff f8e2 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009a      	lsls	r2, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <UART_SetConfig+0x118>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	0119      	lsls	r1, r3, #4
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009a      	lsls	r2, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <UART_SetConfig+0x118>)
 8002f1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2064      	movs	r0, #100	; 0x64
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	3332      	adds	r3, #50	; 0x32
 8002f2c:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <UART_SetConfig+0x118>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f38:	4419      	add	r1, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <UART_SetConfig+0x118>)
 8002f52:	fba3 0302 	umull	r0, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2064      	movs	r0, #100	; 0x64
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	3332      	adds	r3, #50	; 0x32
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <UART_SetConfig+0x118>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	440a      	add	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40013800 	.word	0x40013800
 8002f84:	51eb851f 	.word	0x51eb851f

08002f88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f8e:	f3ef 8305 	mrs	r3, IPSR
 8002f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <osKernelInitialize+0x32>
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <osKernelInitialize+0x60>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d109      	bne.n	8002fc2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fae:	f3ef 8311 	mrs	r3, BASEPRI
 8002fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002fba:	f06f 0305 	mvn.w	r3, #5
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e00c      	b.n	8002fdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <osKernelInitialize+0x60>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <osKernelInitialize+0x60>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e002      	b.n	8002fdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	200001f8 	.word	0x200001f8

08002fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ff2:	f3ef 8305 	mrs	r3, IPSR
 8002ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8003002:	607b      	str	r3, [r7, #4]
  return(result);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <osKernelStart+0x32>
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <osKernelStart+0x64>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d109      	bne.n	8003026 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003012:	f3ef 8311 	mrs	r3, BASEPRI
 8003016:	603b      	str	r3, [r7, #0]
  return(result);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <osKernelStart+0x3a>
    stat = osErrorISR;
 800301e:	f06f 0305 	mvn.w	r3, #5
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	e00e      	b.n	8003044 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <osKernelStart+0x64>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <osKernelStart+0x64>)
 8003030:	2202      	movs	r2, #2
 8003032:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003034:	f001 f890 	bl	8004158 <vTaskStartScheduler>
      stat = osOK;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e002      	b.n	8003044 <osKernelStart+0x58>
    } else {
      stat = osError;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003044:	68fb      	ldr	r3, [r7, #12]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200001f8 	.word	0x200001f8

08003054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b092      	sub	sp, #72	; 0x48
 8003058:	af04      	add	r7, sp, #16
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003064:	f3ef 8305 	mrs	r3, IPSR
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8094 	bne.w	800319a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003072:	f3ef 8310 	mrs	r3, PRIMASK
 8003076:	623b      	str	r3, [r7, #32]
  return(result);
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 808d 	bne.w	800319a <osThreadNew+0x146>
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <osThreadNew+0x150>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d106      	bne.n	8003096 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003088:	f3ef 8311 	mrs	r3, BASEPRI
 800308c:	61fb      	str	r3, [r7, #28]
  return(result);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8082 	bne.w	800319a <osThreadNew+0x146>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d07e      	beq.n	800319a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80030a0:	2318      	movs	r3, #24
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80030a4:	2300      	movs	r3, #0
 80030a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80030a8:	f107 031b 	add.w	r3, r7, #27
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d045      	beq.n	8003146 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <osThreadNew+0x74>
        name = attr->name;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <osThreadNew+0x9a>
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	2b38      	cmp	r3, #56	; 0x38
 80030e0:	d805      	bhi.n	80030ee <osThreadNew+0x9a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <osThreadNew+0x9e>
        return (NULL);
 80030ee:	2300      	movs	r3, #0
 80030f0:	e054      	b.n	800319c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <osThreadNew+0xd4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2bbb      	cmp	r3, #187	; 0xbb
 8003110:	d90a      	bls.n	8003128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <osThreadNew+0xd4>
        mem = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	e010      	b.n	800314a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10c      	bne.n	800314a <osThreadNew+0xf6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <osThreadNew+0xf6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <osThreadNew+0xf6>
          mem = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
 8003144:	e001      	b.n	800314a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003158:	9202      	str	r2, [sp, #8]
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fe12 	bl	8003d90 <xTaskCreateStatic>
 800316c:	4603      	mov	r3, r0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e013      	b.n	800319a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d110      	bne.n	800319a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	b29a      	uxth	r2, r3
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fe5c 	bl	8003e48 <xTaskCreate>
 8003190:	4603      	mov	r3, r0
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <osThreadNew+0x146>
          hTask = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800319a:	697b      	ldr	r3, [r7, #20]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3738      	adds	r7, #56	; 0x38
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200001f8 	.word	0x200001f8

080031a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b0:	f3ef 8305 	mrs	r3, IPSR
 80031b4:	613b      	str	r3, [r7, #16]
  return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031bc:	f3ef 8310 	mrs	r3, PRIMASK
 80031c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <osDelay+0x34>
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <osDelay+0x58>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d109      	bne.n	80031e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031d0:	f3ef 8311 	mrs	r3, BASEPRI
 80031d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <osDelay+0x3c>
    stat = osErrorISR;
 80031dc:	f06f 0305 	mvn.w	r3, #5
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e007      	b.n	80031f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 ff7e 	bl	80040f0 <vTaskDelay>
    }
  }

  return (stat);
 80031f4:	697b      	ldr	r3, [r7, #20]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200001f8 	.word	0x200001f8

08003204 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a06      	ldr	r2, [pc, #24]	; (800322c <vApplicationGetIdleTaskMemory+0x28>)
 8003214:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4a05      	ldr	r2, [pc, #20]	; (8003230 <vApplicationGetIdleTaskMemory+0x2c>)
 800321a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	200001fc 	.word	0x200001fc
 8003230:	200002b8 	.word	0x200002b8

08003234 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a07      	ldr	r2, [pc, #28]	; (8003260 <vApplicationGetTimerTaskMemory+0x2c>)
 8003244:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4a06      	ldr	r2, [pc, #24]	; (8003264 <vApplicationGetTimerTaskMemory+0x30>)
 800324a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	200004b8 	.word	0x200004b8
 8003264:	20000574 	.word	0x20000574

08003268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f103 0208 	add.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 0208 	add.w	r2, r3, #8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d103      	bne.n	8003324 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e00c      	b.n	800333e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3308      	adds	r3, #8
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e002      	b.n	8003332 <vListInsert+0x2e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d2f6      	bcs.n	800332c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d103      	bne.n	80033a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
	...

080033c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033f2:	f001 fff3 	bl	80053dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	441a      	add	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	3b01      	subs	r3, #1
 8003424:	68f9      	ldr	r1, [r7, #12]
 8003426:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	441a      	add	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	22ff      	movs	r2, #255	; 0xff
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d114      	bne.n	8003472 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01a      	beq.n	8003486 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f91b 	bl	8004690 <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <xQueueGenericReset+0xcc>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	e009      	b.n	8003486 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3310      	adds	r3, #16
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fef6 	bl	8003268 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fef1 	bl	8003268 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003486:	f001 ffd9 	bl	800543c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	; 0x38
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <xQueueGenericCreateStatic+0x52>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <xQueueGenericCreateStatic+0x56>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <xQueueGenericCreateStatic+0x58>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	623b      	str	r3, [r7, #32]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <xQueueGenericCreateStatic+0x7e>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <xQueueGenericCreateStatic+0x82>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueGenericCreateStatic+0x84>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61fb      	str	r3, [r7, #28]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003536:	2350      	movs	r3, #80	; 0x50
 8003538:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b50      	cmp	r3, #80	; 0x50
 800353e:	d00a      	beq.n	8003556 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003568:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f805 	bl	8003586 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800357e:	4618      	mov	r0, r3
 8003580:	3730      	adds	r7, #48	; 0x30
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e002      	b.n	80035a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035b4:	2101      	movs	r1, #1
 80035b6:	69b8      	ldr	r0, [r7, #24]
 80035b8:	f7ff ff06 	bl	80033c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08e      	sub	sp, #56	; 0x38
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xQueueGenericSend+0x32>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <xQueueGenericSend+0x40>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <xQueueGenericSend+0x44>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <xQueueGenericSend+0x46>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <xQueueGenericSend+0x60>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d103      	bne.n	800363a <xQueueGenericSend+0x6e>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <xQueueGenericSend+0x72>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <xQueueGenericSend+0x74>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <xQueueGenericSend+0x8e>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	623b      	str	r3, [r7, #32]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800365a:	f001 f9df 	bl	8004a1c <xTaskGetSchedulerState>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <xQueueGenericSend+0x9e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueGenericSend+0xa2>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericSend+0xa4>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xQueueGenericSend+0xbe>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	61fb      	str	r3, [r7, #28]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800368a:	f001 fea7 	bl	80053dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <xQueueGenericSend+0xd4>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d129      	bne.n	80036f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036a6:	f000 fa07 	bl	8003ab8 <prvCopyDataToQueue>
 80036aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 ffe9 	bl	8004690 <xTaskRemoveFromEventList>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036c4:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <xQueueGenericSend+0x1f8>)
 80036c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	e00a      	b.n	80036ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036dc:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <xQueueGenericSend+0x1f8>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036ec:	f001 fea6 	bl	800543c <vPortExitCritical>
				return pdPASS;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e063      	b.n	80037bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036fa:	f001 fe9f 	bl	800543c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	e05c      	b.n	80037bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f823 	bl	8004758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003712:	2301      	movs	r3, #1
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003716:	f001 fe91 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800371a:	f000 fd8d 	bl	8004238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800371e:	f001 fe5d 	bl	80053dc <vPortEnterCritical>
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003728:	b25b      	sxtb	r3, r3
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d103      	bne.n	8003738 <xQueueGenericSend+0x16c>
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373e:	b25b      	sxtb	r3, r3
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d103      	bne.n	800374e <xQueueGenericSend+0x182>
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800374e:	f001 fe75 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003752:	1d3a      	adds	r2, r7, #4
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f001 f812 	bl	8004784 <xTaskCheckForTimeOut>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d124      	bne.n	80037b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003768:	f000 fa9e 	bl	8003ca8 <prvIsQueueFull>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	3310      	adds	r3, #16
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 ff38 	bl	80045f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003782:	f000 fa29 	bl	8003bd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003786:	f000 fd65 	bl	8004254 <xTaskResumeAll>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f47f af7c 	bne.w	800368a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <xQueueGenericSend+0x1f8>)
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	e772      	b.n	800368a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a6:	f000 fa17 	bl	8003bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037aa:	f000 fd53 	bl	8004254 <xTaskResumeAll>
 80037ae:	e76c      	b.n	800368a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b2:	f000 fa11 	bl	8003bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037b6:	f000 fd4d 	bl	8004254 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037ba:	2300      	movs	r3, #0
		}
	}
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3738      	adds	r7, #56	; 0x38
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08e      	sub	sp, #56	; 0x38
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <xQueueGenericSendFromISR+0x3c>
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <xQueueGenericSendFromISR+0x40>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <xQueueGenericSendFromISR+0x42>
 8003808:	2300      	movs	r3, #0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	623b      	str	r3, [r7, #32]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d103      	bne.n	8003832 <xQueueGenericSendFromISR+0x6a>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <xQueueGenericSendFromISR+0x6e>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueGenericSendFromISR+0x70>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61fb      	str	r3, [r7, #28]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003852:	f001 fe85 	bl	8005560 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003856:	f3ef 8211 	mrs	r2, BASEPRI
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	61ba      	str	r2, [r7, #24]
 800386c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800386e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <xQueueGenericSendFromISR+0xbc>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d12c      	bne.n	80038de <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003894:	f000 f910 	bl	8003ab8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003898:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d112      	bne.n	80038c8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	3324      	adds	r3, #36	; 0x24
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 feee 	bl	8004690 <xTaskRemoveFromEventList>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	b25a      	sxtb	r2, r3
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038dc:	e001      	b.n	80038e2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3738      	adds	r7, #56	; 0x38
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <xQueueReceive+0x30>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	623b      	str	r3, [r7, #32]
}
 8003924:	bf00      	nop
 8003926:	e7fe      	b.n	8003926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <xQueueReceive+0x3e>
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <xQueueReceive+0x42>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueReceive+0x44>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xQueueReceive+0x5e>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61fb      	str	r3, [r7, #28]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003956:	f001 f861 	bl	8004a1c <xTaskGetSchedulerState>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <xQueueReceive+0x6e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <xQueueReceive+0x72>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <xQueueReceive+0x74>
 800396a:	2300      	movs	r3, #0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <xQueueReceive+0x8e>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61bb      	str	r3, [r7, #24]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003986:	f001 fd29 	bl	80053dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01f      	beq.n	80039d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399a:	f000 f8f7 	bl	8003b8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00f      	beq.n	80039ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	3310      	adds	r3, #16
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fe6c 	bl	8004690 <xTaskRemoveFromEventList>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <xQueueReceive+0x1bc>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039ce:	f001 fd35 	bl	800543c <vPortExitCritical>
				return pdPASS;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e069      	b.n	8003aaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039dc:	f001 fd2e 	bl	800543c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e062      	b.n	8003aaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 feb2 	bl	8004758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039f8:	f001 fd20 	bl	800543c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039fc:	f000 fc1c 	bl	8004238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a00:	f001 fcec 	bl	80053dc <vPortEnterCritical>
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d103      	bne.n	8003a1a <xQueueReceive+0x122>
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a20:	b25b      	sxtb	r3, r3
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d103      	bne.n	8003a30 <xQueueReceive+0x138>
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a30:	f001 fd04 	bl	800543c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a34:	1d3a      	adds	r2, r7, #4
 8003a36:	f107 0310 	add.w	r3, r7, #16
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fea1 	bl	8004784 <xTaskCheckForTimeOut>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d123      	bne.n	8003a90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4a:	f000 f917 	bl	8003c7c <prvIsQueueEmpty>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	3324      	adds	r3, #36	; 0x24
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fdc7 	bl	80045f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a64:	f000 f8b8 	bl	8003bd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a68:	f000 fbf4 	bl	8004254 <xTaskResumeAll>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d189      	bne.n	8003986 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <xQueueReceive+0x1bc>)
 8003a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	e780      	b.n	8003986 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a86:	f000 f8a7 	bl	8003bd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a8a:	f000 fbe3 	bl	8004254 <xTaskResumeAll>
 8003a8e:	e77a      	b.n	8003986 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a92:	f000 f8a1 	bl	8003bd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a96:	f000 fbdd 	bl	8004254 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9c:	f000 f8ee 	bl	8003c7c <prvIsQueueEmpty>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f43f af6f 	beq.w	8003986 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3730      	adds	r7, #48	; 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d14d      	bne.n	8003b7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ffb8 	bl	8004a58 <xTaskPriorityDisinherit>
 8003ae8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	e043      	b.n	8003b7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d119      	bne.n	8003b2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6898      	ldr	r0, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	461a      	mov	r2, r3
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	f001 ff68 	bl	80059d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	441a      	add	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d32b      	bcc.n	8003b7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	e026      	b.n	8003b7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68d8      	ldr	r0, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	461a      	mov	r2, r3
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	f001 ff4e 	bl	80059d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	425b      	negs	r3, r3
 8003b46:	441a      	add	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d207      	bcs.n	8003b68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	425b      	negs	r3, r3
 8003b62:	441a      	add	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d105      	bne.n	8003b7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b82:	697b      	ldr	r3, [r7, #20]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	441a      	add	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d303      	bcc.n	8003bc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68d9      	ldr	r1, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f001 ff04 	bl	80059d8 <memcpy>
	}
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be0:	f001 fbfc 	bl	80053dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bec:	e011      	b.n	8003c12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3324      	adds	r3, #36	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fd48 	bl	8004690 <xTaskRemoveFromEventList>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c06:	f000 fe1f 	bl	8004848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dce9      	bgt.n	8003bee <prvUnlockQueue+0x16>
 8003c1a:	e000      	b.n	8003c1e <prvUnlockQueue+0x46>
					break;
 8003c1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c26:	f001 fc09 	bl	800543c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2a:	f001 fbd7 	bl	80053dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c36:	e011      	b.n	8003c5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d012      	beq.n	8003c66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd23 	bl	8004690 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c50:	f000 fdfa 	bl	8004848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c54:	7bbb      	ldrb	r3, [r7, #14]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dce9      	bgt.n	8003c38 <prvUnlockQueue+0x60>
 8003c64:	e000      	b.n	8003c68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c70:	f001 fbe4 	bl	800543c <vPortExitCritical>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c84:	f001 fbaa 	bl	80053dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e001      	b.n	8003c9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 fbcf 	bl	800543c <vPortExitCritical>

	return xReturn;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb0:	f001 fb94 	bl	80053dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d102      	bne.n	8003cc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e001      	b.n	8003cca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f001 fbb7 	bl	800543c <vPortExitCritical>

	return xReturn;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	e014      	b.n	8003d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <vQueueAddToRegistry+0x4c>)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10b      	bne.n	8003d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cf4:	490b      	ldr	r1, [pc, #44]	; (8003d24 <vQueueAddToRegistry+0x4c>)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <vQueueAddToRegistry+0x4c>)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d0a:	e006      	b.n	8003d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b07      	cmp	r3, #7
 8003d16:	d9e7      	bls.n	8003ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	20000974 	.word	0x20000974

08003d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d38:	f001 fb50 	bl	80053dc <vPortEnterCritical>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d103      	bne.n	8003d52 <vQueueWaitForMessageRestricted+0x2a>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d103      	bne.n	8003d68 <vQueueWaitForMessageRestricted+0x40>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d68:	f001 fb68 	bl	800543c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3324      	adds	r3, #36	; 0x24
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fc5b 	bl	8004638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d82:	6978      	ldr	r0, [r7, #20]
 8003d84:	f7ff ff28 	bl	8003bd8 <prvUnlockQueue>
	}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af04      	add	r7, sp, #16
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xTaskCreateStatic+0x2a>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	623b      	str	r3, [r7, #32]
}
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	61fb      	str	r3, [r7, #28]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dd6:	23bc      	movs	r3, #188	; 0xbc
 8003dd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2bbc      	cmp	r3, #188	; 0xbc
 8003dde:	d00a      	beq.n	8003df6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61bb      	str	r3, [r7, #24]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01e      	beq.n	8003e3a <xTaskCreateStatic+0xaa>
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01b      	beq.n	8003e3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e14:	2300      	movs	r3, #0
 8003e16:	9303      	str	r3, [sp, #12]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	9301      	str	r3, [sp, #4]
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f851 	bl	8003ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e34:	f000 f8ec 	bl	8004010 <prvAddNewTaskToReadyList>
 8003e38:	e001      	b.n	8003e3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e3e:	697b      	ldr	r3, [r7, #20]
	}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3728      	adds	r7, #40	; 0x28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af04      	add	r7, sp, #16
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fbbd 	bl	80055dc <pvPortMalloc>
 8003e62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e6a:	20bc      	movs	r0, #188	; 0xbc
 8003e6c:	f001 fbb6 	bl	80055dc <pvPortMalloc>
 8003e70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7e:	e005      	b.n	8003e8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f001 fc6f 	bl	8005764 <vPortFree>
 8003e86:	e001      	b.n	8003e8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d017      	beq.n	8003ec2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	9302      	str	r3, [sp, #8]
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f80f 	bl	8003ed4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb6:	69f8      	ldr	r0, [r7, #28]
 8003eb8:	f000 f8aa 	bl	8004010 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e002      	b.n	8003ec8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	461a      	mov	r2, r3
 8003eec:	21a5      	movs	r1, #165	; 0xa5
 8003eee:	f001 fd81 	bl	80059f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003efc:	3b01      	subs	r3, #1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	617b      	str	r3, [r7, #20]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e012      	b.n	8003f58 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	7819      	ldrb	r1, [r3, #0]
 8003f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3334      	adds	r3, #52	; 0x34
 8003f42:	460a      	mov	r2, r1
 8003f44:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d9e9      	bls.n	8003f32 <prvInitialiseNewTask+0x5e>
 8003f5e:	e000      	b.n	8003f62 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003f60:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	2b37      	cmp	r3, #55	; 0x37
 8003f6e:	d901      	bls.n	8003f74 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f70:	2337      	movs	r3, #55	; 0x37
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	2200      	movs	r2, #0
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff f98b 	bl	80032a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	3318      	adds	r3, #24
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f986 	bl	80032a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	3354      	adds	r3, #84	; 0x54
 8003fc4:	2260      	movs	r2, #96	; 0x60
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fd13 	bl	80059f4 <memset>
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <prvInitialiseNewTask+0x130>)
 8003fd2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <prvInitialiseNewTask+0x134>)
 8003fd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	; (800400c <prvInitialiseNewTask+0x138>)
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	69b8      	ldr	r0, [r7, #24]
 8003fe6:	f001 f90b 	bl	8005200 <pxPortInitialiseStack>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffc:	bf00      	nop
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	08005c28 	.word	0x08005c28
 8004008:	08005c48 	.word	0x08005c48
 800400c:	08005c08 	.word	0x08005c08

08004010 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004018:	f001 f9e0 	bl	80053dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <prvAddNewTaskToReadyList+0xc4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <prvAddNewTaskToReadyList+0xc4>)
 8004024:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004026:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <prvAddNewTaskToReadyList+0xc8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800402e:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <prvAddNewTaskToReadyList+0xc8>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <prvAddNewTaskToReadyList+0xc4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d110      	bne.n	800405e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800403c:	f000 fc28 	bl	8004890 <prvInitialiseTaskLists>
 8004040:	e00d      	b.n	800405e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <prvAddNewTaskToReadyList+0xcc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <prvAddNewTaskToReadyList+0xc8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	429a      	cmp	r2, r3
 8004056:	d802      	bhi.n	800405e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <prvAddNewTaskToReadyList+0xc8>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <prvAddNewTaskToReadyList+0xd0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <prvAddNewTaskToReadyList+0xd0>)
 8004066:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <prvAddNewTaskToReadyList+0xd0>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <prvAddNewTaskToReadyList+0xd4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d903      	bls.n	8004084 <prvAddNewTaskToReadyList+0x74>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <prvAddNewTaskToReadyList+0xd4>)
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <prvAddNewTaskToReadyList+0xd8>)
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7ff f90f 	bl	80032be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a0:	f001 f9cc 	bl	800543c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <prvAddNewTaskToReadyList+0xcc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvAddNewTaskToReadyList+0xc8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d207      	bcs.n	80040ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <prvAddNewTaskToReadyList+0xdc>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000e88 	.word	0x20000e88
 80040d8:	200009b4 	.word	0x200009b4
 80040dc:	20000e94 	.word	0x20000e94
 80040e0:	20000ea4 	.word	0x20000ea4
 80040e4:	20000e90 	.word	0x20000e90
 80040e8:	200009b8 	.word	0x200009b8
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d017      	beq.n	8004132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004102:	4b13      	ldr	r3, [pc, #76]	; (8004150 <vTaskDelay+0x60>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <vTaskDelay+0x30>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004120:	f000 f88a 	bl	8004238 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004124:	2100      	movs	r1, #0
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fd04 	bl	8004b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800412c:	f000 f892 	bl	8004254 <xTaskResumeAll>
 8004130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <vTaskDelay+0x64>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000eb0 	.word	0x20000eb0
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004166:	463a      	mov	r2, r7
 8004168:	1d39      	adds	r1, r7, #4
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff f848 	bl	8003204 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004174:	6839      	ldr	r1, [r7, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	9202      	str	r2, [sp, #8]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	2300      	movs	r3, #0
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	460a      	mov	r2, r1
 8004186:	4924      	ldr	r1, [pc, #144]	; (8004218 <vTaskStartScheduler+0xc0>)
 8004188:	4824      	ldr	r0, [pc, #144]	; (800421c <vTaskStartScheduler+0xc4>)
 800418a:	f7ff fe01 	bl	8003d90 <xTaskCreateStatic>
 800418e:	4603      	mov	r3, r0
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <vTaskStartScheduler+0xc8>)
 8004192:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <vTaskStartScheduler+0xc8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e001      	b.n	80041a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041ac:	f000 fd16 	bl	8004bdc <xTimerCreateTimerTask>
 80041b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d11b      	bne.n	80041f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	613b      	str	r3, [r7, #16]
}
 80041ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041cc:	4b15      	ldr	r3, [pc, #84]	; (8004224 <vTaskStartScheduler+0xcc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3354      	adds	r3, #84	; 0x54
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <vTaskStartScheduler+0xd0>)
 80041d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <vTaskStartScheduler+0xd4>)
 80041d8:	f04f 32ff 	mov.w	r2, #4294967295
 80041dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <vTaskStartScheduler+0xd8>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <vTaskStartScheduler+0xdc>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041ea:	f001 f885 	bl	80052f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041ee:	e00e      	b.n	800420e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d10a      	bne.n	800420e <vTaskStartScheduler+0xb6>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <vTaskStartScheduler+0xb4>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	08005bb4 	.word	0x08005bb4
 800421c:	08004861 	.word	0x08004861
 8004220:	20000eac 	.word	0x20000eac
 8004224:	200009b4 	.word	0x200009b4
 8004228:	20000010 	.word	0x20000010
 800422c:	20000ea8 	.word	0x20000ea8
 8004230:	20000e94 	.word	0x20000e94
 8004234:	20000e8c 	.word	0x20000e8c

08004238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800423c:	4b04      	ldr	r3, [pc, #16]	; (8004250 <vTaskSuspendAll+0x18>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a03      	ldr	r2, [pc, #12]	; (8004250 <vTaskSuspendAll+0x18>)
 8004244:	6013      	str	r3, [r2, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000eb0 	.word	0x20000eb0

08004254 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004262:	4b42      	ldr	r3, [pc, #264]	; (800436c <xTaskResumeAll+0x118>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <xTaskResumeAll+0x2c>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	603b      	str	r3, [r7, #0]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004280:	f001 f8ac 	bl	80053dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004284:	4b39      	ldr	r3, [pc, #228]	; (800436c <xTaskResumeAll+0x118>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3b01      	subs	r3, #1
 800428a:	4a38      	ldr	r2, [pc, #224]	; (800436c <xTaskResumeAll+0x118>)
 800428c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <xTaskResumeAll+0x118>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d162      	bne.n	800435c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <xTaskResumeAll+0x11c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d05e      	beq.n	800435c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800429e:	e02f      	b.n	8004300 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042a0:	4b34      	ldr	r3, [pc, #208]	; (8004374 <xTaskResumeAll+0x120>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3318      	adds	r3, #24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff f861 	bl	8003374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f85c 	bl	8003374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <xTaskResumeAll+0x124>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d903      	bls.n	80042d0 <xTaskResumeAll+0x7c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <xTaskResumeAll+0x124>)
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4a27      	ldr	r2, [pc, #156]	; (800437c <xTaskResumeAll+0x128>)
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe ffe9 	bl	80032be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <xTaskResumeAll+0x12c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <xTaskResumeAll+0x130>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTaskResumeAll+0x120>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1cb      	bne.n	80042a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800430e:	f000 fb61 	bl	80049d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <xTaskResumeAll+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800431e:	f000 f845 	bl	80043ac <xTaskIncrementTick>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <xTaskResumeAll+0x130>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3b01      	subs	r3, #1
 8004332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f1      	bne.n	800431e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <xTaskResumeAll+0x134>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <xTaskResumeAll+0x130>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskResumeAll+0x138>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800435c:	f001 f86e 	bl	800543c <vPortExitCritical>

	return xAlreadyYielded;
 8004360:	68bb      	ldr	r3, [r7, #8]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000eb0 	.word	0x20000eb0
 8004370:	20000e88 	.word	0x20000e88
 8004374:	20000e48 	.word	0x20000e48
 8004378:	20000e90 	.word	0x20000e90
 800437c:	200009b8 	.word	0x200009b8
 8004380:	200009b4 	.word	0x200009b4
 8004384:	20000e9c 	.word	0x20000e9c
 8004388:	20000e98 	.word	0x20000e98
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <xTaskGetTickCount+0x18>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800439c:	687b      	ldr	r3, [r7, #4]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	20000e8c 	.word	0x20000e8c

080043ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <xTaskIncrementTick+0x150>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 808e 	bne.w	80044dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043c0:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <xTaskIncrementTick+0x154>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043c8:	4a4d      	ldr	r2, [pc, #308]	; (8004500 <xTaskIncrementTick+0x154>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d120      	bne.n	8004416 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <xTaskIncrementTick+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	603b      	str	r3, [r7, #0]
}
 80043f0:	bf00      	nop
 80043f2:	e7fe      	b.n	80043f2 <xTaskIncrementTick+0x46>
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <xTaskIncrementTick+0x158>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <xTaskIncrementTick+0x15c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a41      	ldr	r2, [pc, #260]	; (8004504 <xTaskIncrementTick+0x158>)
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	; (8004508 <xTaskIncrementTick+0x15c>)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b40      	ldr	r3, [pc, #256]	; (800450c <xTaskIncrementTick+0x160>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	4a3f      	ldr	r2, [pc, #252]	; (800450c <xTaskIncrementTick+0x160>)
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	f000 fadf 	bl	80049d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <xTaskIncrementTick+0x164>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d34e      	bcc.n	80044be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004420:	4b38      	ldr	r3, [pc, #224]	; (8004504 <xTaskIncrementTick+0x158>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <xTaskIncrementTick+0x82>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xTaskIncrementTick+0x84>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <xTaskIncrementTick+0x164>)
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	601a      	str	r2, [r3, #0]
					break;
 800443c:	e03f      	b.n	80044be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xTaskIncrementTick+0x158>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d203      	bcs.n	800445e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004456:	4a2e      	ldr	r2, [pc, #184]	; (8004510 <xTaskIncrementTick+0x164>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6013      	str	r3, [r2, #0]
						break;
 800445c:	e02f      	b.n	80044be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe ff86 	bl	8003374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	3318      	adds	r3, #24
 8004474:	4618      	mov	r0, r3
 8004476:	f7fe ff7d 	bl	8003374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	4b25      	ldr	r3, [pc, #148]	; (8004514 <xTaskIncrementTick+0x168>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d903      	bls.n	800448e <xTaskIncrementTick+0xe2>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <xTaskIncrementTick+0x168>)
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <xTaskIncrementTick+0x16c>)
 800449c:	441a      	add	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3304      	adds	r3, #4
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fe ff0a 	bl	80032be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	4b1b      	ldr	r3, [pc, #108]	; (800451c <xTaskIncrementTick+0x170>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3b3      	bcc.n	8004420 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044bc:	e7b0      	b.n	8004420 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044be:	4b17      	ldr	r3, [pc, #92]	; (800451c <xTaskIncrementTick+0x170>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4914      	ldr	r1, [pc, #80]	; (8004518 <xTaskIncrementTick+0x16c>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d907      	bls.n	80044e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e004      	b.n	80044e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044dc:	4b10      	ldr	r3, [pc, #64]	; (8004520 <xTaskIncrementTick+0x174>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3301      	adds	r3, #1
 80044e2:	4a0f      	ldr	r2, [pc, #60]	; (8004520 <xTaskIncrementTick+0x174>)
 80044e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <xTaskIncrementTick+0x178>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044f2:	697b      	ldr	r3, [r7, #20]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000eb0 	.word	0x20000eb0
 8004500:	20000e8c 	.word	0x20000e8c
 8004504:	20000e40 	.word	0x20000e40
 8004508:	20000e44 	.word	0x20000e44
 800450c:	20000ea0 	.word	0x20000ea0
 8004510:	20000ea8 	.word	0x20000ea8
 8004514:	20000e90 	.word	0x20000e90
 8004518:	200009b8 	.word	0x200009b8
 800451c:	200009b4 	.word	0x200009b4
 8004520:	20000e98 	.word	0x20000e98
 8004524:	20000e9c 	.word	0x20000e9c

08004528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800452e:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <vTaskSwitchContext+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <vTaskSwitchContext+0xb4>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800453c:	e046      	b.n	80045cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <vTaskSwitchContext+0xb4>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004544:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <vTaskSwitchContext+0xb8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e010      	b.n	800456e <vTaskSwitchContext+0x46>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <vTaskSwitchContext+0x40>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	607b      	str	r3, [r7, #4]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vTaskSwitchContext+0x3e>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b01      	subs	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	491d      	ldr	r1, [pc, #116]	; (80045e4 <vTaskSwitchContext+0xbc>)
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0e4      	beq.n	800454c <vTaskSwitchContext+0x24>
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <vTaskSwitchContext+0xbc>)
 800458e:	4413      	add	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3308      	adds	r3, #8
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d104      	bne.n	80045b2 <vTaskSwitchContext+0x8a>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <vTaskSwitchContext+0xc0>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <vTaskSwitchContext+0xb8>)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <vTaskSwitchContext+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3354      	adds	r3, #84	; 0x54
 80045c8:	4a08      	ldr	r2, [pc, #32]	; (80045ec <vTaskSwitchContext+0xc4>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000eb0 	.word	0x20000eb0
 80045dc:	20000e9c 	.word	0x20000e9c
 80045e0:	20000e90 	.word	0x20000e90
 80045e4:	200009b8 	.word	0x200009b8
 80045e8:	200009b4 	.word	0x200009b4
 80045ec:	20000010 	.word	0x20000010

080045f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <vTaskPlaceOnEventList+0x44>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3318      	adds	r3, #24
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fe fe70 	bl	8003304 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004624:	2101      	movs	r1, #1
 8004626:	6838      	ldr	r0, [r7, #0]
 8004628:	f000 fa84 	bl	8004b34 <prvAddCurrentTaskToDelayedList>
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	200009b4 	.word	0x200009b4

08004638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	617b      	str	r3, [r7, #20]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <vTaskPlaceOnEventListRestricted+0x54>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3318      	adds	r3, #24
 8004666:	4619      	mov	r1, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7fe fe28 	bl	80032be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f000 fa59 	bl	8004b34 <prvAddCurrentTaskToDelayedList>
	}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200009b4 	.word	0x200009b4

08004690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60fb      	str	r3, [r7, #12]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	3318      	adds	r3, #24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe fe57 	bl	8003374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c6:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <xTaskRemoveFromEventList+0xb0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11d      	bne.n	800470a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fe4e 	bl	8003374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <xTaskRemoveFromEventList+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d903      	bls.n	80046ec <xTaskRemoveFromEventList+0x5c>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <xTaskRemoveFromEventList+0xb4>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <xTaskRemoveFromEventList+0xb8>)
 80046fa:	441a      	add	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7fe fddb 	bl	80032be <vListInsertEnd>
 8004708:	e005      	b.n	8004716 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	3318      	adds	r3, #24
 800470e:	4619      	mov	r1, r3
 8004710:	480e      	ldr	r0, [pc, #56]	; (800474c <xTaskRemoveFromEventList+0xbc>)
 8004712:	f7fe fdd4 	bl	80032be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <xTaskRemoveFromEventList+0xc0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	429a      	cmp	r2, r3
 8004722:	d905      	bls.n	8004730 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <xTaskRemoveFromEventList+0xc4>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e001      	b.n	8004734 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004734:	697b      	ldr	r3, [r7, #20]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000eb0 	.word	0x20000eb0
 8004744:	20000e90 	.word	0x20000e90
 8004748:	200009b8 	.word	0x200009b8
 800474c:	20000e48 	.word	0x20000e48
 8004750:	200009b4 	.word	0x200009b4
 8004754:	20000e9c 	.word	0x20000e9c

08004758 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <vTaskInternalSetTimeOutState+0x24>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <vTaskInternalSetTimeOutState+0x28>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000ea0 	.word	0x20000ea0
 8004780:	20000e8c 	.word	0x20000e8c

08004784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047c6:	f000 fe09 	bl	80053dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <xTaskCheckForTimeOut+0xbc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d102      	bne.n	80047ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e023      	b.n	8004832 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <xTaskCheckForTimeOut+0xc0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d007      	beq.n	8004806 <xTaskCheckForTimeOut+0x82>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	e015      	b.n	8004832 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d20b      	bcs.n	8004828 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff9b 	bl	8004758 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e004      	b.n	8004832 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004832:	f000 fe03 	bl	800543c <vPortExitCritical>

	return xReturn;
 8004836:	69fb      	ldr	r3, [r7, #28]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000e8c 	.word	0x20000e8c
 8004844:	20000ea0 	.word	0x20000ea0

08004848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <vTaskMissedYield+0x14>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000e9c 	.word	0x20000e9c

08004860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004868:	f000 f852 	bl	8004910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <prvIdleTask+0x28>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d9f9      	bls.n	8004868 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <prvIdleTask+0x2c>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004884:	e7f0      	b.n	8004868 <prvIdleTask+0x8>
 8004886:	bf00      	nop
 8004888:	200009b8 	.word	0x200009b8
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	e00c      	b.n	80048b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <prvInitialiseTaskLists+0x60>)
 80048a8:	4413      	add	r3, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe fcdc 	bl	8003268 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3301      	adds	r3, #1
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b37      	cmp	r3, #55	; 0x37
 80048ba:	d9ef      	bls.n	800489c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <prvInitialiseTaskLists+0x64>)
 80048be:	f7fe fcd3 	bl	8003268 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c2:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x68>)
 80048c4:	f7fe fcd0 	bl	8003268 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048c8:	480c      	ldr	r0, [pc, #48]	; (80048fc <prvInitialiseTaskLists+0x6c>)
 80048ca:	f7fe fccd 	bl	8003268 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048ce:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x70>)
 80048d0:	f7fe fcca 	bl	8003268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048d4:	480b      	ldr	r0, [pc, #44]	; (8004904 <prvInitialiseTaskLists+0x74>)
 80048d6:	f7fe fcc7 	bl	8003268 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x78>)
 80048dc:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <prvInitialiseTaskLists+0x64>)
 80048de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <prvInitialiseTaskLists+0x7c>)
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x68>)
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200009b8 	.word	0x200009b8
 80048f4:	20000e18 	.word	0x20000e18
 80048f8:	20000e2c 	.word	0x20000e2c
 80048fc:	20000e48 	.word	0x20000e48
 8004900:	20000e5c 	.word	0x20000e5c
 8004904:	20000e74 	.word	0x20000e74
 8004908:	20000e40 	.word	0x20000e40
 800490c:	20000e44 	.word	0x20000e44

08004910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004916:	e019      	b.n	800494c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004918:	f000 fd60 	bl	80053dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <prvCheckTasksWaitingTermination+0x50>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe fd23 	bl	8003374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <prvCheckTasksWaitingTermination+0x54>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <prvCheckTasksWaitingTermination+0x54>)
 8004936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 8004940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004942:	f000 fd7b 	bl	800543c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f810 	bl	800496c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <prvCheckTasksWaitingTermination+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e1      	bne.n	8004918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000e5c 	.word	0x20000e5c
 8004964:	20000e88 	.word	0x20000e88
 8004968:	20000e70 	.word	0x20000e70

0800496c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3354      	adds	r3, #84	; 0x54
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f851 	bl	8005a20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fee9 	bl	8005764 <vPortFree>
				vPortFree( pxTCB );
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fee6 	bl	8005764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004998:	e018      	b.n	80049cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d103      	bne.n	80049ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fedd 	bl	8005764 <vPortFree>
	}
 80049aa:	e00f      	b.n	80049cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d00a      	beq.n	80049cc <prvDeleteTCB+0x60>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <prvDeleteTCB+0x5e>
	}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <prvResetNextTaskUnblockTime+0x40>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <prvResetNextTaskUnblockTime+0x14>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <prvResetNextTaskUnblockTime+0x16>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <prvResetNextTaskUnblockTime+0x44>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049f6:	e008      	b.n	8004a0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvResetNextTaskUnblockTime+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <prvResetNextTaskUnblockTime+0x44>)
 8004a08:	6013      	str	r3, [r2, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000e40 	.word	0x20000e40
 8004a18:	20000ea8 	.word	0x20000ea8

08004a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <xTaskGetSchedulerState+0x34>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	e008      	b.n	8004a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <xTaskGetSchedulerState+0x38>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	e001      	b.n	8004a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a42:	687b      	ldr	r3, [r7, #4]
	}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000e94 	.word	0x20000e94
 8004a54:	20000eb0 	.word	0x20000eb0

08004a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d056      	beq.n	8004b1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <xTaskPriorityDisinherit+0xd0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d00a      	beq.n	8004a8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60bb      	str	r3, [r7, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d02c      	beq.n	8004b1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d128      	bne.n	8004b1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fc50 	bl	8003374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <xTaskPriorityDisinherit+0xd4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <xTaskPriorityDisinherit+0xa4>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <xTaskPriorityDisinherit+0xd4>)
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <xTaskPriorityDisinherit+0xd8>)
 8004b0a:	441a      	add	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f7fe fbd3 	bl	80032be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b1c:	697b      	ldr	r3, [r7, #20]
	}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	200009b4 	.word	0x200009b4
 8004b2c:	20000e90 	.word	0x20000e90
 8004b30:	200009b8 	.word	0x200009b8

08004b34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b3e:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fc12 	bl	8003374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d10a      	bne.n	8004b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4819      	ldr	r0, [pc, #100]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8004b68:	f7fe fba9 	bl	80032be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b6c:	e026      	b.n	8004bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d209      	bcs.n	8004b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f7fe fbb6 	bl	8003304 <vListInsert>
}
 8004b98:	e010      	b.n	8004bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7fe fbac 	bl	8003304 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d202      	bcs.n	8004bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	6013      	str	r3, [r2, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000e8c 	.word	0x20000e8c
 8004bc8:	200009b4 	.word	0x200009b4
 8004bcc:	20000e74 	.word	0x20000e74
 8004bd0:	20000e44 	.word	0x20000e44
 8004bd4:	20000e40 	.word	0x20000e40
 8004bd8:	20000ea8 	.word	0x20000ea8

08004bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004be6:	f000 facb 	bl	8005180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bea:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <xTimerCreateTimerTask+0x80>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d021      	beq.n	8004c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bfa:	1d3a      	adds	r2, r7, #4
 8004bfc:	f107 0108 	add.w	r1, r7, #8
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fb15 	bl	8003234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	9202      	str	r2, [sp, #8]
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	2302      	movs	r3, #2
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	4910      	ldr	r1, [pc, #64]	; (8004c60 <xTimerCreateTimerTask+0x84>)
 8004c1e:	4811      	ldr	r0, [pc, #68]	; (8004c64 <xTimerCreateTimerTask+0x88>)
 8004c20:	f7ff f8b6 	bl	8003d90 <xTaskCreateStatic>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <xTimerCreateTimerTask+0x8c>)
 8004c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <xTimerCreateTimerTask+0x8c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	613b      	str	r3, [r7, #16]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c52:	697b      	ldr	r3, [r7, #20]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000ee4 	.word	0x20000ee4
 8004c60:	08005bbc 	.word	0x08005bbc
 8004c64:	08004d89 	.word	0x08004d89
 8004c68:	20000ee8 	.word	0x20000ee8

08004c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	623b      	str	r3, [r7, #32]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <xTimerGenericCommand+0x98>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d02a      	beq.n	8004cf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	dc18      	bgt.n	8004ce6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cb4:	f7ff feb2 	bl	8004a1c <xTaskGetSchedulerState>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d109      	bne.n	8004cd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <xTimerGenericCommand+0x98>)
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	f107 0110 	add.w	r1, r7, #16
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	f7fe fc7f 	bl	80035cc <xQueueGenericSend>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd0:	e012      	b.n	8004cf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <xTimerGenericCommand+0x98>)
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	f107 0110 	add.w	r1, r7, #16
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f7fe fc75 	bl	80035cc <xQueueGenericSend>
 8004ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce4:	e008      	b.n	8004cf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <xTimerGenericCommand+0x98>)
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	f107 0110 	add.w	r1, r7, #16
 8004cee:	2300      	movs	r3, #0
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	f7fe fd69 	bl	80037c8 <xQueueGenericSendFromISR>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3728      	adds	r7, #40	; 0x28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000ee4 	.word	0x20000ee4

08004d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <prvProcessExpiredTimer+0x7c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fe fb27 	bl	8003374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d122      	bne.n	8004d74 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	18d1      	adds	r1, r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f000 f8c8 	bl	8004ed0 <prvInsertTimerInActiveList>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d46:	2300      	movs	r3, #0
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	6978      	ldr	r0, [r7, #20]
 8004d52:	f7ff ff8b 	bl	8004c6c <xTimerGenericCommand>
 8004d56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60fb      	str	r3, [r7, #12]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	4798      	blx	r3
}
 8004d7c:	bf00      	nop
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000edc 	.word	0x20000edc

08004d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f857 	bl	8004e48 <prvGetNextExpireTime>
 8004d9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f803 	bl	8004dac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004da6:	f000 f8d5 	bl	8004f54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004daa:	e7f1      	b.n	8004d90 <prvTimerTask+0x8>

08004dac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004db6:	f7ff fa3f 	bl	8004238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dba:	f107 0308 	add.w	r3, r7, #8
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f866 	bl	8004e90 <prvSampleTimeNow>
 8004dc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d130      	bne.n	8004e2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <prvProcessTimerOrBlockTask+0x3c>
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d806      	bhi.n	8004de8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dda:	f7ff fa3b 	bl	8004254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff91 	bl	8004d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004de6:	e024      	b.n	8004e32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <prvProcessTimerOrBlockTask+0x90>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <prvProcessTimerOrBlockTask+0x94>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f7fe ff8b 	bl	8003d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e12:	f7ff fa1f 	bl	8004254 <xTaskResumeAll>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <prvProcessTimerOrBlockTask+0x98>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
}
 8004e2c:	e001      	b.n	8004e32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e2e:	f7ff fa11 	bl	8004254 <xTaskResumeAll>
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000ee0 	.word	0x20000ee0
 8004e40:	20000ee4 	.word	0x20000ee4
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <prvGetNextExpireTime+0x44>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bf0c      	ite	eq
 8004e5a:	2301      	moveq	r3, #1
 8004e5c:	2300      	movne	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <prvGetNextExpireTime+0x44>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e001      	b.n	8004e7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000edc 	.word	0x20000edc

08004e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e98:	f7ff fa7a 	bl	8004390 <xTaskGetTickCount>
 8004e9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <prvSampleTimeNow+0x3c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d205      	bcs.n	8004eb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ea8:	f000 f908 	bl	80050bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e002      	b.n	8004eba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <prvSampleTimeNow+0x3c>)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000eec 	.word	0x20000eec

08004ed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d812      	bhi.n	8004f1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad2      	subs	r2, r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e01b      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <prvInsertTimerInActiveList+0x7c>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7fe f9f5 	bl	8003304 <vListInsert>
 8004f1a:	e012      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d206      	bcs.n	8004f32 <prvInsertTimerInActiveList+0x62>
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e007      	b.n	8004f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f32:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <prvInsertTimerInActiveList+0x80>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f7fe f9e1 	bl	8003304 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f42:	697b      	ldr	r3, [r7, #20]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000ee0 	.word	0x20000ee0
 8004f50:	20000edc 	.word	0x20000edc

08004f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08e      	sub	sp, #56	; 0x38
 8004f58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f5a:	e09d      	b.n	8005098 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da18      	bge.n	8004f94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	3304      	adds	r3, #4
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	61fb      	str	r3, [r7, #28]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8a:	6850      	ldr	r0, [r2, #4]
 8004f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	db7d      	blt.n	8005096 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d004      	beq.n	8004fb0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe f9e2 	bl	8003374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff6c 	bl	8004e90 <prvSampleTimeNow>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b09      	cmp	r3, #9
 8004fbe:	d86b      	bhi.n	8005098 <prvProcessReceivedCommands+0x144>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <prvProcessReceivedCommands+0x74>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08005099 	.word	0x08005099
 8004fd8:	0800504d 	.word	0x0800504d
 8004fdc:	08005085 	.word	0x08005085
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff1 	.word	0x08004ff1
 8004fe8:	08005099 	.word	0x08005099
 8004fec:	0800504d 	.word	0x0800504d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	18d1      	adds	r1, r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffe:	f7ff ff67 	bl	8004ed0 <prvInsertTimerInActiveList>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d047      	beq.n	8005098 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d13f      	bne.n	8005098 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	441a      	add	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	2100      	movs	r1, #0
 8005028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502a:	f7ff fe1f 	bl	8004c6c <xTimerGenericCommand>
 800502e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d130      	bne.n	8005098 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61bb      	str	r3, [r7, #24]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	699a      	ldr	r2, [r3, #24]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	18d1      	adds	r1, r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507e:	f7ff ff27 	bl	8004ed0 <prvInsertTimerInActiveList>
					break;
 8005082:	e009      	b.n	8005098 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800508e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005090:	f000 fb68 	bl	8005764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005094:	e000      	b.n	8005098 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005096:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <prvProcessReceivedCommands+0x164>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	1d39      	adds	r1, r7, #4
 800509e:	2200      	movs	r2, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe fc29 	bl	80038f8 <xQueueReceive>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f af57 	bne.w	8004f5c <prvProcessReceivedCommands+0x8>
	}
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	3730      	adds	r7, #48	; 0x30
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000ee4 	.word	0x20000ee4

080050bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050c2:	e045      	b.n	8005150 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050c4:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <prvSwitchTimerLists+0xbc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050ce:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <prvSwitchTimerLists+0xbc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3304      	adds	r3, #4
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe f949 	bl	8003374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d12e      	bne.n	8005150 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	429a      	cmp	r2, r3
 8005102:	d90e      	bls.n	8005122 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <prvSwitchTimerLists+0xbc>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fe f8f2 	bl	8003304 <vListInsert>
 8005120:	e016      	b.n	8005150 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005122:	2300      	movs	r3, #0
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2300      	movs	r3, #0
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	2100      	movs	r1, #0
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fd9d 	bl	8004c6c <xTimerGenericCommand>
 8005132:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <prvSwitchTimerLists+0x94>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	603b      	str	r3, [r7, #0]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <prvSwitchTimerLists+0xbc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1b4      	bne.n	80050c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <prvSwitchTimerLists+0xbc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <prvSwitchTimerLists+0xc0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a04      	ldr	r2, [pc, #16]	; (8005178 <prvSwitchTimerLists+0xbc>)
 8005166:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <prvSwitchTimerLists+0xc0>)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000edc 	.word	0x20000edc
 800517c:	20000ee0 	.word	0x20000ee0

08005180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005186:	f000 f929 	bl	80053dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800518a:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d120      	bne.n	80051d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005192:	4814      	ldr	r0, [pc, #80]	; (80051e4 <prvCheckForValidListAndQueue+0x64>)
 8005194:	f7fe f868 	bl	8003268 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005198:	4813      	ldr	r0, [pc, #76]	; (80051e8 <prvCheckForValidListAndQueue+0x68>)
 800519a:	f7fe f865 	bl	8003268 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <prvCheckForValidListAndQueue+0x6c>)
 80051a0:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <prvCheckForValidListAndQueue+0x64>)
 80051a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051a4:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <prvCheckForValidListAndQueue+0x70>)
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <prvCheckForValidListAndQueue+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051aa:	2300      	movs	r3, #0
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <prvCheckForValidListAndQueue+0x74>)
 80051b0:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <prvCheckForValidListAndQueue+0x78>)
 80051b2:	2110      	movs	r1, #16
 80051b4:	200a      	movs	r0, #10
 80051b6:	f7fe f96f 	bl	8003498 <xQueueGenericCreateStatic>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4a08      	ldr	r2, [pc, #32]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <prvCheckForValidListAndQueue+0x60>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	490b      	ldr	r1, [pc, #44]	; (80051fc <prvCheckForValidListAndQueue+0x7c>)
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fd82 	bl	8003cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d4:	f000 f932 	bl	800543c <vPortExitCritical>
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000ee4 	.word	0x20000ee4
 80051e4:	20000eb4 	.word	0x20000eb4
 80051e8:	20000ec8 	.word	0x20000ec8
 80051ec:	20000edc 	.word	0x20000edc
 80051f0:	20000ee0 	.word	0x20000ee0
 80051f4:	20000f90 	.word	0x20000f90
 80051f8:	20000ef0 	.word	0x20000ef0
 80051fc:	08005bc4 	.word	0x08005bc4

08005200 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3b04      	subs	r3, #4
 8005210:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b04      	subs	r3, #4
 800521e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3b04      	subs	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005230:	4a08      	ldr	r2, [pc, #32]	; (8005254 <pxPortInitialiseStack+0x54>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b14      	subs	r3, #20
 800523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b20      	subs	r3, #32
 8005246:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005248:	68fb      	ldr	r3, [r7, #12]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	08005259 	.word	0x08005259

08005258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <prvTaskExitError+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d00a      	beq.n	8005282 <prvTaskExitError+0x2a>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <prvTaskExitError+0x28>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60bb      	str	r3, [r7, #8]
}
 8005294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005296:	bf00      	nop
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0fc      	beq.n	8005298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	2000000c 	.word	0x2000000c

080052b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <pxCurrentTCBConst2>)
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052ba:	f380 8809 	msr	PSP, r0
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ce:	4770      	bx	lr

080052d0 <pxCurrentTCBConst2>:
 80052d0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80052d8:	4806      	ldr	r0, [pc, #24]	; (80052f4 <prvPortStartFirstTask+0x1c>)
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f380 8808 	msr	MSP, r0
 80052e2:	b662      	cpsie	i
 80052e4:	b661      	cpsie	f
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	df00      	svc	0
 80052f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052f2:	bf00      	nop
 80052f4:	e000ed08 	.word	0xe000ed08

080052f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052fe:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <xPortStartScheduler+0xd0>)
 8005300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	22ff      	movs	r2, #255	; 0xff
 800530e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005320:	b2da      	uxtb	r2, r3
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <xPortStartScheduler+0xd4>)
 8005324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005326:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005328:	2207      	movs	r2, #7
 800532a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800532c:	e009      	b.n	8005342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800532e:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3b01      	subs	r3, #1
 8005334:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d0ef      	beq.n	800532e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1c3 0307 	rsb	r3, r3, #7
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00a      	beq.n	8005370 <xPortStartScheduler+0x78>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	60bb      	str	r3, [r7, #8]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005370:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <xPortStartScheduler+0xd8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <xPortStartScheduler+0xd8>)
 8005384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <xPortStartScheduler+0xdc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <xPortStartScheduler+0xdc>)
 8005394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <xPortStartScheduler+0xdc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <xPortStartScheduler+0xdc>)
 80053a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053a6:	f000 f8b9 	bl	800551c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053aa:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <xPortStartScheduler+0xe0>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053b0:	f7ff ff92 	bl	80052d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053b4:	f7ff f8b8 	bl	8004528 <vTaskSwitchContext>
	prvTaskExitError();
 80053b8:	f7ff ff4e 	bl	8005258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000e400 	.word	0xe000e400
 80053cc:	20000fe0 	.word	0x20000fe0
 80053d0:	20000fe4 	.word	0x20000fe4
 80053d4:	e000ed20 	.word	0xe000ed20
 80053d8:	2000000c 	.word	0x2000000c

080053dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
}
 80053f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <vPortEnterCritical+0x58>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	4a0d      	ldr	r2, [pc, #52]	; (8005434 <vPortEnterCritical+0x58>)
 80053fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <vPortEnterCritical+0x58>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10f      	bne.n	8005428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <vPortEnterCritical+0x5c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <vPortEnterCritical+0x4c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	603b      	str	r3, [r7, #0]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vPortEnterCritical+0x4a>
	}
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <vPortExitCritical+0x4c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <vPortExitCritical+0x24>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
 800545e:	e7fe      	b.n	800545e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <vPortExitCritical+0x4c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a08      	ldr	r2, [pc, #32]	; (8005488 <vPortExitCritical+0x4c>)
 8005468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <vPortExitCritical+0x4c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d105      	bne.n	800547e <vPortExitCritical+0x42>
 8005472:	2300      	movs	r3, #0
 8005474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f383 8811 	msr	BASEPRI, r3
}
 800547c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	2000000c 	.word	0x2000000c
 800548c:	00000000 	.word	0x00000000

08005490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005490:	f3ef 8009 	mrs	r0, PSP
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <pxCurrentTCBConst>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054a0:	6010      	str	r0, [r2, #0]
 80054a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80054a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054aa:	f380 8811 	msr	BASEPRI, r0
 80054ae:	f7ff f83b 	bl	8004528 <vTaskSwitchContext>
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8811 	msr	BASEPRI, r0
 80054ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	6808      	ldr	r0, [r1, #0]
 80054c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054c6:	f380 8809 	msr	PSP, r0
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	4770      	bx	lr

080054d0 <pxCurrentTCBConst>:
 80054d0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054f2:	f7fe ff5b 	bl	80043ac <xTaskIncrementTick>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SysTick_Handler+0x40>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <vPortSetupTimerInterrupt+0x30>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <vPortSetupTimerInterrupt+0x34>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <vPortSetupTimerInterrupt+0x38>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a09      	ldr	r2, [pc, #36]	; (8005558 <vPortSetupTimerInterrupt+0x3c>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	4a08      	ldr	r2, [pc, #32]	; (800555c <vPortSetupTimerInterrupt+0x40>)
 800553a:	3b01      	subs	r3, #1
 800553c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <vPortSetupTimerInterrupt+0x30>)
 8005540:	2207      	movs	r2, #7
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	e000e010 	.word	0xe000e010
 8005550:	e000e018 	.word	0xe000e018
 8005554:	20000000 	.word	0x20000000
 8005558:	10624dd3 	.word	0x10624dd3
 800555c:	e000e014 	.word	0xe000e014

08005560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005566:	f3ef 8305 	mrs	r3, IPSR
 800556a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b0f      	cmp	r3, #15
 8005570:	d914      	bls.n	800559c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005572:	4a16      	ldr	r2, [pc, #88]	; (80055cc <vPortValidateInterruptPriority+0x6c>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <vPortValidateInterruptPriority+0x70>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	7afa      	ldrb	r2, [r7, #11]
 8005582:	429a      	cmp	r2, r3
 8005584:	d20a      	bcs.n	800559c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	607b      	str	r3, [r7, #4]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <vPortValidateInterruptPriority+0x74>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <vPortValidateInterruptPriority+0x78>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d90a      	bls.n	80055c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	603b      	str	r3, [r7, #0]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <vPortValidateInterruptPriority+0x60>
	}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	e000e3f0 	.word	0xe000e3f0
 80055d0:	20000fe0 	.word	0x20000fe0
 80055d4:	e000ed0c 	.word	0xe000ed0c
 80055d8:	20000fe4 	.word	0x20000fe4

080055dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055e8:	f7fe fe26 	bl	8004238 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055ec:	4b58      	ldr	r3, [pc, #352]	; (8005750 <pvPortMalloc+0x174>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055f4:	f000 f910 	bl	8005818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055f8:	4b56      	ldr	r3, [pc, #344]	; (8005754 <pvPortMalloc+0x178>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 808e 	bne.w	8005722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01d      	beq.n	8005648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800560c:	2208      	movs	r2, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d014      	beq.n	8005648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <pvPortMalloc+0x6c>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	617b      	str	r3, [r7, #20]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d069      	beq.n	8005722 <pvPortMalloc+0x146>
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <pvPortMalloc+0x17c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d864      	bhi.n	8005722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005658:	4b40      	ldr	r3, [pc, #256]	; (800575c <pvPortMalloc+0x180>)
 800565a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800565c:	4b3f      	ldr	r3, [pc, #252]	; (800575c <pvPortMalloc+0x180>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005662:	e004      	b.n	800566e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d903      	bls.n	8005680 <pvPortMalloc+0xa4>
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f1      	bne.n	8005664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005680:	4b33      	ldr	r3, [pc, #204]	; (8005750 <pvPortMalloc+0x174>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	429a      	cmp	r2, r3
 8005688:	d04b      	beq.n	8005722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2208      	movs	r2, #8
 8005690:	4413      	add	r3, r2
 8005692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	2308      	movs	r3, #8
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d91f      	bls.n	80056ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <pvPortMalloc+0xf8>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	613b      	str	r3, [r7, #16]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	1ad2      	subs	r2, r2, r3
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056e6:	69b8      	ldr	r0, [r7, #24]
 80056e8:	f000 f8f8 	bl	80058dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <pvPortMalloc+0x17c>)
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <pvPortMalloc+0x17c>)
 80056f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <pvPortMalloc+0x17c>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b18      	ldr	r3, [pc, #96]	; (8005760 <pvPortMalloc+0x184>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d203      	bcs.n	800570e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005706:	4b14      	ldr	r3, [pc, #80]	; (8005758 <pvPortMalloc+0x17c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <pvPortMalloc+0x184>)
 800570c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <pvPortMalloc+0x178>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	431a      	orrs	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005722:	f7fe fd97 	bl	8004254 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <pvPortMalloc+0x16a>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60fb      	str	r3, [r7, #12]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <pvPortMalloc+0x168>
	return pvReturn;
 8005746:	69fb      	ldr	r3, [r7, #28]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3728      	adds	r7, #40	; 0x28
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20001bf0 	.word	0x20001bf0
 8005754:	20001bfc 	.word	0x20001bfc
 8005758:	20001bf4 	.word	0x20001bf4
 800575c:	20001be8 	.word	0x20001be8
 8005760:	20001bf8 	.word	0x20001bf8

08005764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d048      	beq.n	8005808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005776:	2308      	movs	r3, #8
 8005778:	425b      	negs	r3, r3
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4b21      	ldr	r3, [pc, #132]	; (8005810 <vPortFree+0xac>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4013      	ands	r3, r2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <vPortFree+0x44>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60fb      	str	r3, [r7, #12]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <vPortFree+0x62>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60bb      	str	r3, [r7, #8]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <vPortFree+0xac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d019      	beq.n	8005808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d115      	bne.n	8005808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <vPortFree+0xac>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	401a      	ands	r2, r3
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057ec:	f7fe fd24 	bl	8004238 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <vPortFree+0xb0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4413      	add	r3, r2
 80057fa:	4a06      	ldr	r2, [pc, #24]	; (8005814 <vPortFree+0xb0>)
 80057fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057fe:	6938      	ldr	r0, [r7, #16]
 8005800:	f000 f86c 	bl	80058dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005804:	f7fe fd26 	bl	8004254 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005808:	bf00      	nop
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20001bfc 	.word	0x20001bfc
 8005814:	20001bf4 	.word	0x20001bf4

08005818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800581e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <prvHeapInit+0xac>)
 8005826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3307      	adds	r3, #7
 8005836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0307 	bic.w	r3, r3, #7
 800583e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <prvHeapInit+0xac>)
 8005848:	4413      	add	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <prvHeapInit+0xb0>)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005856:	4b1c      	ldr	r3, [pc, #112]	; (80058c8 <prvHeapInit+0xb0>)
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4413      	add	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005864:	2208      	movs	r2, #8
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <prvHeapInit+0xb4>)
 8005878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800587a:	4b14      	ldr	r3, [pc, #80]	; (80058cc <prvHeapInit+0xb4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <prvHeapInit+0xb4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	1ad2      	subs	r2, r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <prvHeapInit+0xb4>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <prvHeapInit+0xb8>)
 80058a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <prvHeapInit+0xbc>)
 80058ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058b0:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <prvHeapInit+0xc0>)
 80058b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000fe8 	.word	0x20000fe8
 80058c8:	20001be8 	.word	0x20001be8
 80058cc:	20001bf0 	.word	0x20001bf0
 80058d0:	20001bf8 	.word	0x20001bf8
 80058d4:	20001bf4 	.word	0x20001bf4
 80058d8:	20001bfc 	.word	0x20001bfc

080058dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058e4:	4b27      	ldr	r3, [pc, #156]	; (8005984 <prvInsertBlockIntoFreeList+0xa8>)
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e002      	b.n	80058f0 <prvInsertBlockIntoFreeList+0x14>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d8f7      	bhi.n	80058ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4413      	add	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d108      	bne.n	800591e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	441a      	add	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d118      	bne.n	8005964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <prvInsertBlockIntoFreeList+0xac>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d00d      	beq.n	800595a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	441a      	add	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e008      	b.n	800596c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <prvInsertBlockIntoFreeList+0xac>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e003      	b.n	800596c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d002      	beq.n	800597a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	20001be8 	.word	0x20001be8
 8005988:	20001bf0 	.word	0x20001bf0

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	2600      	movs	r6, #0
 8005990:	4d0c      	ldr	r5, [pc, #48]	; (80059c4 <__libc_init_array+0x38>)
 8005992:	4c0d      	ldr	r4, [pc, #52]	; (80059c8 <__libc_init_array+0x3c>)
 8005994:	1b64      	subs	r4, r4, r5
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	f000 f8f0 	bl	8005b80 <_init>
 80059a0:	2600      	movs	r6, #0
 80059a2:	4d0a      	ldr	r5, [pc, #40]	; (80059cc <__libc_init_array+0x40>)
 80059a4:	4c0a      	ldr	r4, [pc, #40]	; (80059d0 <__libc_init_array+0x44>)
 80059a6:	1b64      	subs	r4, r4, r5
 80059a8:	10a4      	asrs	r4, r4, #2
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08005c68 	.word	0x08005c68
 80059c8:	08005c68 	.word	0x08005c68
 80059cc:	08005c68 	.word	0x08005c68
 80059d0:	08005c6c 	.word	0x08005c6c

080059d4 <__retarget_lock_acquire_recursive>:
 80059d4:	4770      	bx	lr

080059d6 <__retarget_lock_release_recursive>:
 80059d6:	4770      	bx	lr

080059d8 <memcpy>:
 80059d8:	440a      	add	r2, r1
 80059da:	4291      	cmp	r1, r2
 80059dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80059e0:	d100      	bne.n	80059e4 <memcpy+0xc>
 80059e2:	4770      	bx	lr
 80059e4:	b510      	push	{r4, lr}
 80059e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ea:	4291      	cmp	r1, r2
 80059ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059f0:	d1f9      	bne.n	80059e6 <memcpy+0xe>
 80059f2:	bd10      	pop	{r4, pc}

080059f4 <memset>:
 80059f4:	4603      	mov	r3, r0
 80059f6:	4402      	add	r2, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <cleanup_glue>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	460c      	mov	r4, r1
 8005a08:	6809      	ldr	r1, [r1, #0]
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	b109      	cbz	r1, 8005a12 <cleanup_glue+0xe>
 8005a0e:	f7ff fff9 	bl	8005a04 <cleanup_glue>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a1a:	f000 b869 	b.w	8005af0 <_free_r>
	...

08005a20 <_reclaim_reent>:
 8005a20:	4b2c      	ldr	r3, [pc, #176]	; (8005ad4 <_reclaim_reent+0xb4>)
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4604      	mov	r4, r0
 8005a28:	4283      	cmp	r3, r0
 8005a2a:	d051      	beq.n	8005ad0 <_reclaim_reent+0xb0>
 8005a2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005a2e:	b143      	cbz	r3, 8005a42 <_reclaim_reent+0x22>
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d14a      	bne.n	8005acc <_reclaim_reent+0xac>
 8005a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a38:	6819      	ldr	r1, [r3, #0]
 8005a3a:	b111      	cbz	r1, 8005a42 <_reclaim_reent+0x22>
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 f857 	bl	8005af0 <_free_r>
 8005a42:	6961      	ldr	r1, [r4, #20]
 8005a44:	b111      	cbz	r1, 8005a4c <_reclaim_reent+0x2c>
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 f852 	bl	8005af0 <_free_r>
 8005a4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a4e:	b111      	cbz	r1, 8005a56 <_reclaim_reent+0x36>
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 f84d 	bl	8005af0 <_free_r>
 8005a56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a58:	b111      	cbz	r1, 8005a60 <_reclaim_reent+0x40>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f848 	bl	8005af0 <_free_r>
 8005a60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a62:	b111      	cbz	r1, 8005a6a <_reclaim_reent+0x4a>
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 f843 	bl	8005af0 <_free_r>
 8005a6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005a6c:	b111      	cbz	r1, 8005a74 <_reclaim_reent+0x54>
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 f83e 	bl	8005af0 <_free_r>
 8005a74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005a76:	b111      	cbz	r1, 8005a7e <_reclaim_reent+0x5e>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f000 f839 	bl	8005af0 <_free_r>
 8005a7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005a80:	b111      	cbz	r1, 8005a88 <_reclaim_reent+0x68>
 8005a82:	4620      	mov	r0, r4
 8005a84:	f000 f834 	bl	8005af0 <_free_r>
 8005a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a8a:	b111      	cbz	r1, 8005a92 <_reclaim_reent+0x72>
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 f82f 	bl	8005af0 <_free_r>
 8005a92:	69a3      	ldr	r3, [r4, #24]
 8005a94:	b1e3      	cbz	r3, 8005ad0 <_reclaim_reent+0xb0>
 8005a96:	4620      	mov	r0, r4
 8005a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a9a:	4798      	blx	r3
 8005a9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a9e:	b1b9      	cbz	r1, 8005ad0 <_reclaim_reent+0xb0>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005aa6:	f7ff bfad 	b.w	8005a04 <cleanup_glue>
 8005aaa:	5949      	ldr	r1, [r1, r5]
 8005aac:	b941      	cbnz	r1, 8005ac0 <_reclaim_reent+0xa0>
 8005aae:	3504      	adds	r5, #4
 8005ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab2:	2d80      	cmp	r5, #128	; 0x80
 8005ab4:	68d9      	ldr	r1, [r3, #12]
 8005ab6:	d1f8      	bne.n	8005aaa <_reclaim_reent+0x8a>
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 f819 	bl	8005af0 <_free_r>
 8005abe:	e7ba      	b.n	8005a36 <_reclaim_reent+0x16>
 8005ac0:	680e      	ldr	r6, [r1, #0]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f814 	bl	8005af0 <_free_r>
 8005ac8:	4631      	mov	r1, r6
 8005aca:	e7ef      	b.n	8005aac <_reclaim_reent+0x8c>
 8005acc:	2500      	movs	r5, #0
 8005ace:	e7ef      	b.n	8005ab0 <_reclaim_reent+0x90>
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000010 	.word	0x20000010

08005ad8 <__malloc_lock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__malloc_lock+0x8>)
 8005ada:	f7ff bf7b 	b.w	80059d4 <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	20001c00 	.word	0x20001c00

08005ae4 <__malloc_unlock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__malloc_unlock+0x8>)
 8005ae6:	f7ff bf76 	b.w	80059d6 <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	20001c00 	.word	0x20001c00

08005af0 <_free_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	4605      	mov	r5, r0
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d040      	beq.n	8005b7a <_free_r+0x8a>
 8005af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005afc:	1f0c      	subs	r4, r1, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bfb8      	it	lt
 8005b02:	18e4      	addlt	r4, r4, r3
 8005b04:	f7ff ffe8 	bl	8005ad8 <__malloc_lock>
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <_free_r+0x8c>)
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	b933      	cbnz	r3, 8005b1c <_free_r+0x2c>
 8005b0e:	6063      	str	r3, [r4, #4]
 8005b10:	6014      	str	r4, [r2, #0]
 8005b12:	4628      	mov	r0, r5
 8005b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b18:	f7ff bfe4 	b.w	8005ae4 <__malloc_unlock>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d908      	bls.n	8005b32 <_free_r+0x42>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	1821      	adds	r1, r4, r0
 8005b24:	428b      	cmp	r3, r1
 8005b26:	bf01      	itttt	eq
 8005b28:	6819      	ldreq	r1, [r3, #0]
 8005b2a:	685b      	ldreq	r3, [r3, #4]
 8005b2c:	1809      	addeq	r1, r1, r0
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	e7ed      	b.n	8005b0e <_free_r+0x1e>
 8005b32:	461a      	mov	r2, r3
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b10b      	cbz	r3, 8005b3c <_free_r+0x4c>
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d9fa      	bls.n	8005b32 <_free_r+0x42>
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	1850      	adds	r0, r2, r1
 8005b40:	42a0      	cmp	r0, r4
 8005b42:	d10b      	bne.n	8005b5c <_free_r+0x6c>
 8005b44:	6820      	ldr	r0, [r4, #0]
 8005b46:	4401      	add	r1, r0
 8005b48:	1850      	adds	r0, r2, r1
 8005b4a:	4283      	cmp	r3, r0
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	d1e0      	bne.n	8005b12 <_free_r+0x22>
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4401      	add	r1, r0
 8005b56:	6011      	str	r1, [r2, #0]
 8005b58:	6053      	str	r3, [r2, #4]
 8005b5a:	e7da      	b.n	8005b12 <_free_r+0x22>
 8005b5c:	d902      	bls.n	8005b64 <_free_r+0x74>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	602b      	str	r3, [r5, #0]
 8005b62:	e7d6      	b.n	8005b12 <_free_r+0x22>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	1821      	adds	r1, r4, r0
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf01      	itttt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	1809      	addeq	r1, r1, r0
 8005b72:	6021      	streq	r1, [r4, #0]
 8005b74:	6063      	str	r3, [r4, #4]
 8005b76:	6054      	str	r4, [r2, #4]
 8005b78:	e7cb      	b.n	8005b12 <_free_r+0x22>
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20001c04 	.word	0x20001c04

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
